Linux Service and Security
    OpenSSL
    OpenSSH
    DNS  BIND
    web：http httpd(apache) php mariadb(mysql)
        lamp
        nginx(tenine)  lnmp
    file server: ftp  nfs  samba
    dhcp  pxe
    iptables

OpenSSL
    NIST
    保密性
        数据保密性
        隐私性
    完整性
        数据完整性
        系统完整性
    可用性
    安全攻击
        被动攻击：窃听
        主动攻击：伪装，重放，消息篡改，拒绝服务
    安全机制
        加密：数字签名，访问控制，数据完整性，认证交换，流量填充，路由控制，公证
    安全服务
        认证，访问控制，
    数据保密性
        连接保密性
        无连接保密性
        选择域保密性
        流量保密性
    数据完整性
    不可否认性

    密码算法和协议
        对称加密
        公钥加密(非对称加密)
        单向加密
        认证协议

    Linux系统：OpenSSL，gpg（PGP的实现）
        对称加密算法，加密解密共用一个密钥
            DES: Data Encryption Standard
            3DES
            AES: Advaced Encryption Standard      128bits  192bits   256bits   384bits   512bits
            Blowfish
            Twofish
            IDEA
            RC6
            CAST5
                特性：
                    1. 加密解密使用同一密钥
                    2. 将原始数据分割成固定大小的块，逐个进行加密
                缺陷：
                    1. 密钥过多
                    2. 密钥分发不安全

        公钥加密，密钥成对出现
            公钥：公开给所有人，pubkey
            私钥：自己保存，必须保证其私密性，secret key
            
            数字签名(身份认证):接受方确认发送方的身份
            密钥交换：发送方用对方的公钥加密对称密钥，并发送给对方
            数据加密
                特点：用公钥加密的数据，只能用与之对应的私钥解密，反之亦然
            算法：RAS DSA ELGamal
        
        单向加密，只能加密，不能解密，提取数据指纹
            特性：定长输出，雪崩效应
            算法：
                md5     128bits
                sha1    160bits
                sha224
                sha256
                sha384
                sha512

            功能：保证数据完整性
    
    密钥交换协议 IKE
        公钥加密
        DH(Deffie-Hellman)
            A: p  g
            B: p  g
            A: x   不公开
            B: y   不公开
            A把 p^x%g 的结果发给B
            B把 p^y%g 的结果发给A

            A 把接收到的结果进行 x 次方运算，即 p^y%g^x
            B 把接收到的结果进行 y 次方运算，即 p^x%g^y
            双方计算等到的结果一致，即为密钥

    PKI Public Key Infrastructure  公钥基础设施
        签证机构：CA
        注册机构：RA
        证书吊销列表：CRL
        证书存取库

        X.509：定义了证书的结构及认证协议标准
            版本号
            序列号
            签名算法ID
            发行者名称
            有效期限
            主体名称
            发行者惟一标识
            主体惟一标识
            扩展
            发行者签名

    SSL: Secure Socket Layer
    TLS: Transport Layer Security
        1995年： SSL 2.0  Netscape
        1996年： SSL 3.0
        1999年： TLS 1.0
        2006年： TLS 1.1
        2008年： TLS 1.2
        2015年： TLS 1.3

        分层设计
            1. 最低层，基础算法原语实现，aes，ras，md5
            2. 向上一层，各种算法的实现
            3. 再向上一层，组合算法实现半成品
            4. 用各种组件拼装而成的种种成品密码学协议和软件，tls，ssh

    OpenSSl：开源项目
        三个组件
            OpenSSL：多用途的命令行工具
            libcrypto：公共加密库
            libssl：库，实现ssl及tls

        OpenSSL命令行
            openssl version  版本号
            标准命令、消息摘要命令、加密算法

            标准命令
                enc  ca  req
            对称加密
                工具：openssl enc   gpg
                算法：3DES  aes  blowfish  twofish

            enc 命令
                加密  # openssl enc -e -des3 -a -salt -in fstab -out fstab.ciphertxt
                解密  # openssl enc -d -des3 -a -salt -in fstab.ciphertxt -out fstab

            单向加密
                工具：md5sum  sha1sum sha224sum ... openssl dgst

                dgst命令
                    openssl dgst md5 /PAHT/TO/SOMEFILE

            MAC  Message Authentication Code，单向加密的一种延伸应用，用于实现在网络通信中保证所传输的数据的完整性
                机制：CBC-MAC   HMAC(使用md5或sha1算法)

            生成用户密码
                passwd命令(openssl的子命令)
                openssl passwd -1 -salt SALT 
            
            生成随机数
                openssl rand -base64|-hex NUM
                NUM表示字节数，-hex，每个字符4位，出现字符数为 NUM*2
            
            公钥加密
                算法：RSA  ELGamal
                加密工具：GPG rasutl

                    数字签名：
                        算法：RSA   DSA(Digital Signature Algorithm,也称DSS，Digital Signature Standard)   ELGamal
                    密钥交换
                        算法：dh
            生成密钥对
                在生成密钥对时，会用到随机数
                
                随机数生成器
                    熵池
                        /dev/rand  仅从熵池中取数据，熵池中数据用尽会阻塞
                        /dev/urand  默认从熵池中取数据，熵池中数据用尽后，会利用软件生成伪随机数，不会阻塞

                生成私钥
                    openssl genrsa -out /PATH/TO/PRIVATE-KYE.FILE 2048
                    例如：openssl genrsa -out prikey 2048
                    (umask 077;openssl genrsa -out prikey 2048)    将属组和其它用户的所有权限去除
                    用小括号将命令括起来，会启动一个子进程来执行括号中的命令，这样就不会改变当前的 umask 的值
                提取公钥
                    openssl ras -in /PATH/TO/PRIVATE-KEY.FILE -pubout 
                    例如：openssl rsa -in prikey -pubout    默认输出到屏幕

DNS and BIND
    DNS：Domain Name Service
        协议：tcp/53 udp/53 C/S架构
        BIND Bekerley Internet Name DNS：Domain  ISC

    本地名称解析配置文件  hosts
        Linux  /etc/hosts
        Windows  %windows%system32/drivers/etc/hosts

        1.1.1.1 www.lsu.edu.cn

    顶级域(一级域)  Top Level Domain   TLD
        com edu mil gov org net int

        三类：；组织域、国家域、反向域

    DNS查询类型
        递归查询
        迭代查询

    解析类型
        name->IP
        IP->name
        注意：正向反向解析是两个不同的空间

    DNS服务器类型
        主DNS服务器
            维护所负责解析的域内解析库(由管理员维护)的服务器
        辅助DNS服务器
            从主DNS服务器或其它从DNS服务器那里复制(区域传递)一份解析库
            序列号：解析库的版本号，前提：主服务器解析内容发生改变，其序列号增加
            刷新时间间隔：从服务器向主服务器请求同步解析库的时间间隔
            重试时间间隔：从服务器向主服务器请求同步解析库失败时，再次尝试的时间间隔
                重试时间间隔应该 小于 刷新时间间隔
            过期时长：从服务器始终联系不上主服务器多长后，放弃服务器角色，停止提供服务
            
            通知机制：当主服务器解析库发生改变，会主动通知从服务器

        缓存DNS服务器
        转发DNS服务器


    FQDN  Full Qualified Domain Name，完全限定域名，例如 www.lsu.edu.cn. 最后的点号不能省略
    一次完整的查询请求经过的流程
        client -> hosts文件 -> DNS Service -> local cache -> DNS Server(Recursion 递归) -> Server cache -> iteration(迭代) 

        解析答案
            肯定答案
            否定答案：请求的条目不存在等原因导致无法返回结果
            权威答案
            非权威答案

    资源记录  Resource Record  RR
    解析库由RR组成
        记录类型：
            SOA：Start Of Authority，起始授权记录，一个区域解析有且仅有一条SOA记录，并且必须出现在第一条
            A：Internet Address，作用，将FQDN -> IP
            AAAA：FQDN -> IPv6
            PTR：PoinTeR，IP -> FQDN
            NS：Name Server，专用于标明当前区域的DNS服务器
            CNAME：Canonical Name，别名记录
            MX：Mail eXchanger，邮件交换器

    资源记录定义的格式
        语法：name [TTL] IN rr_type value
        注意：
            1. TTL，可全局继承
            2. @ 符号可用于引用当前区域名字
            3. 同一个名字可以有多个不同的值，通过多条记录定义多个不同的值，以轮询方式响应
            4. 同一个值也可以有多个不同的名字，通过多条记录定义多个不同的名字，仅表示可通过不同的名字找到一个主机
            5. 相邻的两条资源记录的name相同时，可省略

        SOA：
            name：当前区域的名字，例如“magedu.com.”
            value：
                1. 当前区域的主DNS服务器FQDN，也可以是当前区域的名字，可用 @ 来表示
                2. 当前区域管理员的邮箱地址，地址中不能包含 @ 符号，一般用 . 来替换，如：linux.magedu.com.
                3. (主服务器协调属性的定义及否定答案的统一TTL)
                    例如：
                        magedu.com. 86400 IN SOA ns.magedu.com. nsadmin.magedu.com. (
                            2015042201              ;序列号
                            2H                      ;刷新时间，表示 2 小时
                            10M                     ;重试时间，表示 10 分钟
                            1W                      ;过期时间，表示 1 周
                            1D                      ;否定答案的TTL值
                        )

        NS：
            name：当前区域名字
            value：当前区域的某DNS服务器的主机名，如 ns.magedu.com.
            一个区域可以有多个DNS服务器(多条记录)
            例如：
                magedu.com. IN NS ns1.magedu.com.
                magedu.com. IN NS ns2.magedu.com.
            注意：
                对于NS记录而言，任何一条NS记录的服务器主机名，都应该在后续有一条A记录

        MX：
            name：当前区域名字
            value：当前区域的某邮件服务器的主机名，如 mx.magedu.com.
                value之前应该有一个数字(0-99)，表示此服务器优先级，一个区域内的MX记录可有多条
            例如：
                magedu.com. IN MX 10 mx1.magedu.com.
                            IN MX 20 mx2.magedu.com.
            注意：
                对于MX记录而言，任何一条MX记录的服务器主机名，都应该在后续有一条A记录

        A：
            name：某主机的完整名字，FQDN，如 www.magedu.com.
            value：主机对应的IP地址
            例如：
                www.magedu.com. IN A 1.1.1.1
                www.magedu.com. IN A 1.1.1.2

        注意：
            *.magedu.com. IN A 1.1.1.4          ;泛域名解析
            可通过泛域名解析，解析至特定地址，来避免用户输错名称，DNS给出否定答案，
            magedu.com. IN A 1.1.1.4

        AAAA：
            name：FQDN
            value：IPv6

        PTR：
            name：IP，有特定格式，把IP地址反过来写 1.2.3.4 要写作 4.3.2.1，还要加上特定后缀，in-addr.arpa.  
                完整的名字为： 4.3.2.1.in-addr.arpa.
            value：FQDN
            例如： 4.3.2.1.in-addr.arpa. IN PTR www.magedu.com.
            有简写方式，假设 1.2.3 是网络号，那么上述记录可写成：
                4. IN PTR www.magedu.com.
                网络地址和后缀可省略，主机IP地址要反写

        CNAME：
            name：别名的FQDN
            value：正式名字FQDN
            例如：
                web.magedu.com. IN CNAME www.magedu.com.

    子域授权，每个域的名称都是通过上级解析服务器在解析库中进行授权
        类根域授权 tld

            .com.   IN      NS      ns1.com.
            .com.   IN      NS      ns2.com.
            ns1.com.     IN      A       2.2.2.1
            ns2.com.     IN      A       2.2.2.2

        magedu.com.  在.com的名称服务器上的解析库添加资源记录

            magedu.com.     IN      NS      ns1.magedu.com.
                            IN      NS      ns2.magedu.com.
                            IN      NS      ns3.magedu.com.
            
            ns1.magedu.com.     IN      A          3.3.3.1
            ns2.magedu.com.     IN      A          3.3.3.2 
            ns3.magedu.com.     IN      A          3.3.3.3

            glue record  粘合记录

    域名注册
        代理商：万网，新网，godaddy
        注册完成之后，想用自己的专用服务器解析：
            管理后台，把NS记录指向服务器名称和A记录指向服务器地址

    BIND的安装配置
        dns服务，程序包名 bind，程序名 named
        程序包
            bind
            bind-lib
            bind-utils
            bind-chroot  /var/named/chroot

    bind
        服务脚本：/etc/rc.d/init.d/named
        主配置文件：
            /etc/named.conf     /etc/named.rfc1912.zones       /etc/rndc.conf     /etc/rndc.key    

        rndc：remote name domain controller  953/tcp
            默认安装在同一主机，且只能通过 127.0.0.1 来连接 named，提供辅助性功能

        解析库文件
            /var/named/ZONE_NAME.zone
            
            注意：
                1. 一台物理服务器可同时为多个区域提供解析
                2. 必须有根区域文件 默认为 named.ca
                3. 应该有两个甚至更多(如果启用IPv6)实现localhost名称正反解析库和本地回环地址127.0.0.1反向解析库

        主配置文件：
            全局配置
                options{};
            日志子系统配置
                logging{};
            区域定义：本机能为哪些zone进行解析，就要定义哪些zone
                zone "ZONE_NAME" IN {};

            注意：任何服务如果期望及能被通过网络被其它主机访问，至少要监听在一个能与外部主机通信的IP地址上

        缓存名称服务器的配置
            监听外部地址即可
            dnssec：
                建议关闭 dnssec  将 yes -> no
            allow-query { any; };

        主dns名称服务器
            1. 在主配置文件中定义区域
                zone "ZONE_NAME" IN {
                    type { master|slave|hint|forward };
                    file "ZONE_NAME.zone";
                };

                例如：
                    zone "magedu.com" IN {
                        type master;
                        file "magedu.com.zone";
                    };

            2. 定义区域解析库文件
                出现的内容：宏定义   资源记录
                例如：
                    $TTL 86400
                    $ORIGIN magedu.com.
                    @       IN      SOA         ns1.magedu.com.     admin.magedu.com.   (
                            2015042201
                            1h
                            5m
                            7d
                            1d)
                            IN      NS                  ns1.magedu.com.
                            IN      NS                  ns2.magedu.com.
                            IN      MX      10          mx1               ;是 mx1.magedu.com. 的简写
                            IN      MX      20          mx2
                    ns1     IN      A                   172.16.100.11
                    ns2     IN      A                   172.16.100.13
                    mx1     IN      A                   172.16.100.18
                    mx2     IN      A                   172.16.100.22
                    www     IN      A                   172.16.100.11
                    ftp     IN      A                   172.16.100.100


                注意：应该修改解析库文件的权限，640，同时将文件的属组改为 named 组

        测试命令
            
            dig [@server]  [-t type] name [queryopt...]
            dig用于测试dns系统，不会解析hosts文件

            查询选项
                +[no]trace      是否跟踪解析过程
                +[no]recurse    是否进行递归解析
            dig -x IP @SERVER       进行反向查询

            host命令
            host [-t type] name [SERVER]

            nslookup命令
            交互式模式
                nslookup>
                server IP       指明使用哪个dns服务器进行查询    
                set q=RR_TYPE   指明查询资源记录类型
                NAME            要查询的名称

        反向区域
            区域名称：网络地址反写.in-addr.arpa.
            172.16.100 -> 100.16.172.in-addr.arpa.
            1. 定义区域
                zone  "ZONE_NAME"  IN {
                    type { master | slave | forward };
                    file "网络地址.zone"
                }
            2. 区域解析库
                注意：不需要 MX A AAAA 记录，以 PTR 为主

                $TTL 1D
                $ORIGIN 100.16.172.in-addr.arpa.
                @       IN          SOA          ns1.magedu.com.     admin.magedu.com.   (
                                        2015042201
                                        1h
                                        5m
                                        7d
                                        1d )
                        IN          NS              ns1.magedu.com.
                        IN          NS              ns2.magedu.com.

                11      IN          PTR             ns1.magedu.com.
                12      IN          PTR             ns2.magedu.com.
                18      IN          PTR             mx1.magedu.com.
                12      IN          PTR             www.magedu.com.

        模拟全量传送
            dig -t axfr ZONE_NAME @SERVER
            dig -t axfr magedu.com @172.16.100.11

        主从复制
            1. 应该是一台独立的名称服务器
            2. 主服务器区域解析库文件中，必须有一条ns记录指向从服务器
            3. 从服务器是需要定义区域，解析库文件应放置于 /var/named/slaves 目录中
            4. 主服务器得允许从服务器作区域传送
            5. 主从服务器时间应该同步，可通过ntp服务
            6. bind程序的版本应该保持一至，否则应从高主低

            定义从区域方法
            zone "ZONE_NAME" IN {
                type slave;
                masters { MASTER_IP; };
                file "slaves/ZONE_NAME.zone";
            };

            例如：
            zone "magedu.com" IN {
                type slave;
                masters { 172.16.100.11; };
                file "slaves/magedu.com.zone";
            };                                      

        rndc
            rndc(953/tcp)           
            rndc COMMAND
                COMMAND
                    reload  重新载入主配置文件和解析库文件
                    reload zone  重新载入解析库文件 
                    retransfer zone  手动传送区域，不管序列号
                    notify  手动必通知
                    reconfig  重新载入主配置文件
                    querylog  开启或关闭查询日志
                    trace  递增debug级别
                    trace LEVE  指定使用debug级别，0 为不启用debug

        子域授权
            正向解析区域子域方法
                定义一个子区域
                ops.magedu.com.         IN      NS      ns1.ops.magedu.com.
                ops.magedu.com.         IN      NS      ns2.ops.magedu.com.
                ns1.ops.magedu.com.     IN      A       1.1.1.1
                ns2.ops.magedu.com.     IN      A       1.1.1.2

                定义转发服务器
                    注意：被转发的服务器要能够为请求做递归，否则转发不予进行
                全部转发：凡是非本机所负责的区域的请求，都转发给指定服务器

                    options {
                        forward { first|only; };
                        forwarders { FORWARD_IP; };
                    };
                
                区域转发，仅转发特定区域的请求至某服务器
                    zone "ZONE_NAME" IN {
                        type forward;
                        forward { first|only; };
                        forwarders  { FORWARD_IP; };
                    };

                /ect/named.conf
                    options {
                        forward first;
                        forwarders { 172.16.0.1; };
                    };

                /etc/named.rfc1912.zones
                    zone "magedu.com" IN {
                        type forward;
                        forward only;
                        forwarders { 172.16.100.11; };
                    };
                    
                    注意：关闭 dnssec
                        dnssec-enable no;
                        dnssec-validator no;

        bind中基础的安全相关配置
            acl：把一个或多个主机归并成一个集合，并通过一个统一的名称调用

            acl ACL_NAME {
                IP;
                IP;
                net/prelen;
            };
            示例：
                acl mynet{
                    172.16.0.0/16;
                };

            bind中有四个内置acl
                none  没有一个主机
                any   任意主机
                local 本机
                localnet  本机IP同掩码计算之后的网络

            注意：只能先定义后引用，因此一般定义在options之前

            访问控制指令
                allow-query {};  允许查询的主机：白名单
                allow-transfer {};  允许区域传送的主机：白名单
                allow-recurseion {};  允许递归的主机：白名单
                allow-update {};  允许更新解析库的内容

        bind view
            视图：一个bind服务器可以定义多个view，每个view可以定义一个或多个zone，每个view用来匹配的客户端
            每个view内可能需要对同一个区域进行解析，但使用不同的解析库文件
            
            view VIEW_NAME {
                match_clients {};
            };

            注意：
                1. 一旦启用view，所有的zone只能定义在view中
                2. 仅有匹配允许递归请求的客户所在的view中需要定义根区域
                3. 客户端请求到达时，是自上而下检查匹配，一旦匹配，就停止

        CDN  Content Delivery Network

        编译安装
            1. 下载源码   www.isc.org
            2. 解压
            3. 添加组和用户
                groupadd -r -g 53 named
                useradd -r -g 53 -u 53 named

            4. ./config --prefix=/usr/local/bind9
                        --sysconfdir=/etc/named
                        --disable-chroot
                        --enable-threads
            5. make && make install

OpenSSH
    ssh：Secure SHell   protocol  22/tcp   安全的远程登录
    OpenSSH是ssh协议的开源实现
    dropbear是另一个开源实现
    ssh协议版本
        V1  基于CRC-32做MAC，不安全，man-in-middle
        V2  双方主机协议选择MAC方式，基于DH算法交换密钥，基于RSA或DSA来实现身份认证

    两种认证方式：
        基于passwor
        基于key

    OpenSSH基于C/S架构来实现
        client：ssh scp sftp
        server：sshd

        客户端组件
            配置文件：/etc/ssh/ssh_config
        服务器端
            配置文件：/etc/ssh/sshd_config
    ssh命令
        格式：
            ssh [user@]hostname [COMMAND]
            ssh -l user hostname [COMMAND]
        如果用户省略，会以当前登录系统正在使用的用户登录远程主机
        选项：
            -p PORT  指定远程服务器端监听的端口
            -X X11转发
            -Y 信任的主机X11转发
    
    基于密钥认证方式
        1. 在客户端生成密钥对
            ssh-keygen -t rsa [-p ''] [-f "~/.ssh/id_rsa"]
        2. 把公钥传输至远程服务器的家目录
            ssh-copy-id [-i [indentity-file]] [user@]hostname
        3. 测试

    scp命令
        scp [options] SRC... DEST
        存在两种情形
            pull 
                scp [options] [user@]host:/PATH/FROM/SOMEWHERE /PATH/TO/SOMEWHERE
            push
                scp [options] /PATH/TO/SOMEWHERE [user@]host:/PATH/FROM/SOMEWHERE
        常用选项：
            -r  递归
            -p  保持文件属性信息
            -q  静默模式
            -P PORT  指明远端主机端口(大写P)

    sftp命令
        sftp [user@]host
            sftp> help

    sshd配置文件
        常用参数
            Port  22022
            ListenAddress 
            PermitRootLogin no    不允许root用户登录
            MaxAuthTries 3    密码最多试错次数
            UseDNS no
            AllowUsers user1 user2   白名单
            AllowGroups grp1 grp2    白名单

    ssh服务最佳实践
        1. 不要使用默认端口
        2. 禁止使用protocol version 1
        3. 限制可登录用户
        4. 设定空闲会话超时时长
        5. 利用防火墙设置ssh访问策略
        6. 仅监听特定的IP地址
        7. 使用强密码策略
            tr -dc A-Za-z0-9_ < /dev/urandom | head -c 30
        8. 基于密钥的认证
        9. 禁止使用空密码
        10. 禁止root用户直接登录
        11. 限制ssh的访问频度和并发在线数
        12. 做好日志，经常分析

    dropbear
        1. 生成密钥
        2. dropbear -p [ip:]port -F -E

OpenSSL
    三个组件
        openssl：多用途的命令行工具
        libcrypto：公共加密库
        libssl：库，ssl和tls协议的实现

    PKI Public Key Infrastructure
        CA
        RA
        CRL  吊销证书列表
        证书存取库

    建立私有CA
        OpenCA
        OpenSSL

        证书申请及签署步骤
            1. 生成申请请求
            2. RA核验
            3. CA签署
            4. 获取证书

        创建私有CA
            openssl配置文件  /etc/pki/tls/openssl.cnf

            1. 创建所需文件
                touch /etc/pki/CA/index.txt
                echo 01 > /etc/pki/CA/serial
            
            2. CA自签证书
                (1) (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)
                (2) openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem
                    -new   生成新证书签署请求
                    -x509  专用于生成CA自签证书
                    -key  生成请求用到的密钥文件
                    -days n  证书有效期
                    -out /PATH/TO/SOMEWHERE  证书保存路径

            3. 发证
                (1)用到证书的主机生成证书请求
                    (umask 077; openssl genrsa -out /etc/httpd/ssl/httpd.key 2048)
                    openssl req -new -key /etc/httpd/ssl/httpd.key -days 365 -out /ect/httpd/ssl/httpd.csr
                (2)把证书文件传递给CA
                (3)CA签署证书，并将证书发给申请者
                    openssl ca -in /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365

            4. 吊销证书
                (1)客户端：获取证书的serail
                    openssl x509 -in /PAHT/FROM/CERT_FILE -noout -serial -subject
                (2)CA端：先根据客户端提交的serial和subject信息对比检验是否与index.txt文件中的信息一致，如一致，则吊销证书
                    openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem
                (3)首次吊销：生成吊销证书的编号
                    echo 01 > /ect/pki/CA/crlnumber
                (4)更新证书吊销列表
                    openssl ca -gencrl -out /thisca.crl
                     
            查看证书信息
                openssl x509 -in /PATH/FROM/CERT_FILE -noout -text | -subject | -serial

            查看crl文件
                openssl crl -in /PATH/FROM/CRL_FILE.crl -noout -text


Web Service
    传输层，提供进程地址
    Port Number 0-65535
    tcp  传输控制协议，面向连接协议，通信之前需要建立虚拟链路，，结束后拆除链路
    udp  User Datagram Protocol，无连接协议
    套接字  IPC的一种实现，允许位于不同主机(甚至同一主机)上的不同进程之间进行通信(数据交换)，Socket API  1983 BSD  4.2
    SOCK_STREAM
    SOCK_DGRAM
    SOCK_UNIX

    0-1023，特权端口，众所周知，永久分配给固定的应用使用，22/tcpssh)  80/tcp(http)  443/tcp(https)
    1024-41951，亦为注册端口，但要求不是特别严格，分配给程序注册某应用使用，11211/tcp(memcached)  3306/tcp(mysql)
    41952+，私有端口，客户端程序随机使用端口，动态端口，其范围的定义 /proc/sys/net/ipv4/ip_local_port_range

    tcp协议的特性
        建立连接，三次握手
        将数据打包成段，校验和(CRC-32)
        确认，重传以及超时
        排序，逻辑序号
        流量控制，滑动窗口算法
        拥塞控制，慢启动和拥塞避免算法

    Socket Domain  根据其使用地址
        AF_INET: Address Family  IPv4
        AF_INET6: IPV6
        AF_UNIX: 同一主机上不同的进程进行通信时使用，每类套接字至少都提供了两种socket，流  数据报

        流：可靠地传递，面向连接，无报文边界
        数据报：不可靠传递，有边界，无连接

    套接字相关的系统调用
        socket()  创建一个套接字
        bind()  绑定
        listen()  监听
        accept()  接受请求
        connect()  请求连接建立
        write()  发送数据
        read()  接收
        
    http：Hyper Text transfer Protocol，超文本传输协议
    HTML，超文本标记语言
    http协议版本
        HTTP/0.9  原型版本，功能简陋
        HTTP/1.0  第一个广泛使用的版本，支持MIME
        HTTP/1.1  增强了缓存功能
        HTTP/2.0

    一次完整的http请求
        1. 建立或处理连接
        2. 接收请求：接收来自于网络的请求报文对某资源的一次请求过程
        3. 处理请求：对报文进行解析，获取请求的方法和资源
            请求报文的首部，元数据
                <method> <URL> <VERSION>
                Host: www.lsu.edu.cn  请求主机名称
                Connection
        4. 访问资源：获取请求报文中请求的资源，DocRoot
            Web服务器资源路径方式
                docroot
                alias
                虚拟主机docroot
                用名家目录docroot
        5. 构建响应报文
            资源的MIME
                显式分类  魔法分类  协商分类
            URL重定向
                web服务器构建响应并非客户请求的资源，而是资源的另一个访问路径
        6. 发送响应报文
        7. 记录日志

    http服务器程序
        httpd(apache)
        nginx
        lighttpd
    应用程序服务器
        IIS
        tomcat jetty  jboss reisn
        webshpere weblogic oc4j

    httpd的安装配置和使用
        httpd：apache
        A Patchy Server = Apache
    
    httpd的特性
        高度模块化：core + modules
        DSO：Dymanic Shared Object
        MPM：Multipath Processing modules
            prefork
                多进程模型，每进程响应一个请求
                一个主进程，负责生成n个子进程，子进程也叫工作进程，每个子进程处理一个用户请求，即使没有用户请求，也会预先生成若干空闲进程，随时等待请求到来，最大不超过1024个
            worker
                多进程多线程，一个进程生成多个线程，一个线程响应一个请求            
            event
                事件驱动模型，一个线程响应多个请求

    httpd
        CentOS 6 2.2
        CentOS 7 2.4

        安装方式
            rpm包安装  编译安装
            
        CentOS 6 2.2
            程序环境
                配置文件：
                    /etc/httpd/conf/httpd.conf
                    /etc/httpd/conf.d/*.conf

                服务脚本
                    /etc/rc.d/init.d/httpd
                    配置文件：/etc/sysconfig/httpd

                主程序文件
                    /usr/sbin/httpd
                    /usr/sbin/httpd.event
                    /usr/sbin/httpd.worker

                日志文件目录
                    /var/logs/httpd
                        access_log  访问日志
                        error_log  错误日志

                站点文档目录
                    /var/www/html

            配置文件组成部分，分成3段
                grep "Section" /etc/httpd/conf/httpd.conf
                ### Section 1: Global Environment
                ### Section 2: 'Main' server configuration
                ### Section 3: Virtual Hosts

            配置格式
                directive  value
                directive不区分大小写，value为路径是取决于文件系统是否区分大小写

        常用配置
            1. 修改监听的IP和端口
                Listen [ip:]port        
                ip省略时，表示监听本机上所有ip地址
                Listen指令可应用多次

            2. 持久连接
                Persistent Connection：建立连接后，每个资源获取完成后，不会断开连接，而是等待其它请求完成
                如何断开？
                    数量限制：100
                    时间限制：可配置

                副作用：对并发访问量较大的服务器，持久连接会使得有些请求得不到响应
                折衷方案：使用较短的持久连接  httpd 2.4 支持毫秒级
                
                KeepAlive On|Off
                MaxKeepAliveRequests 100        多少个
                KeepAliveTimeout 15             多少秒

            3. MPM：Multipath Processing module  多道处理模块
                prefork worker event
                httpd 2.2不支持同时支持编译多个模块，编译时只能选一个。rpm包提供了有一个二进制文件，分别应对不同的pmp方式，确认文法  ps aux | grep httpd

                查看静态编译模块
                    httpd -l
                    apachectl -l
                
                查看静态编译及动态装载模块
                    httpd -M  <==> httpd -t -D
                    apachectl -M

                更换使用httpd程序，将/etc/sysconfig/httpd文件中的行的注释删除，重新启动服务即可
                    HTTPD=/usr/sbin/httpd.worker

                prefork配置
                    StartServers       8        ;默认启动进程数
                    MinSpareServers    5        ;最小空闲进程数
                    MaxSpareServers   20        ;最多空闲进程数
                    ServerLimit      256        ;服务器启动的最大进程数
                    MaxClients       256        ;最大并发连接数
                    MaxRequestsPerChild  4000   ;每个服务器子进程能够处理的请求数，超过之后，会被父进程终止

                worker配置
                    StartServers         4      ;默认启动进程数
                    MaxClients         300      ;最大并发连接数
                    MinSpareThreads     25      ;最小空闲线程数
                    MaxSpareThreads     75      ;最多空间线程数
                    ThreadsPerChild     25      ;每子进程生成线程数
                    MaxRequestsPerChild  0      ;0，表示没有限制，不会被父进程终止

            4. DSO
            配置指令实现模块加载
                LoadModule <module_name> <mod_path>
                模块路径可使用相对路径
                相对于ServertRoot(/etc/httpd)指向路径而言，模块文件的真实路径，/usr/lib64/httpd/modules/，会在ServerRoot下创建一个符号链接，modules -> ../../usr/lib64/httpd/modules

            5. 定义"Main" Server的文档页面路径             
                DocumentRoot
                文件路径映射
                DocumentRoot指向的路径为URL路径的起始位置
                DocumentRoot "/var/www/html"
                test/index.html -> http://HOST:PORT/test/index.html

            6. 站点访问控制
                可基于两种类型
                文件系统路径
                    <Directory ""> </Directory>
                    <File ""> </File>
                    <FileMatch ""> </FileMatch>
                URL路径
                    <Location ""> </Location>
                    <LocationMatch ""> </LocationMatch>
                访问控制机制
                    基于来源地址
                    基于账号

            7. Directory中基于来源地址实现访问控制
                (1)options
                    所有可用特性：Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
                    None，表示全部不启用，All，表示全部启用
                    Indexes  索引
                    FollowSymLinks  允许跟踪符号链接文件
                (2)基于来源地址的访问控制
                    order  检查次序  后一项是默认
                    order allow,deny  白名单
                    order deny,allow  黑名单

                    Allow from
                    Deny from
                    来源地址：
                        IP
                        NetAddr  172.17 172.16.0.0 172.16.0.0/16 172.16.0.0./255.255.0.0

            8. 定义默认主页
                DirectoryIndex index.html index.html.var

            9. 日志设定
                错误日志
                    ErrorLog  logs/error_log
                    LogLevel warn
                        debug info notice warn error crit alert emerg

                访问日志
                    CustomLog  logs/access_log combined

                    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
                    LogFormat "%h %l %u %t \"%r\" %>s %b" common
                    LogFormat "%{Referer}i -> %U" referer
                    LogFormat "%{User-agent}i" agent 

                    %h  客户端IP地址
                    %l  Remote Logname    - 表示为空
                    %u  Remote User   - 表示为空
                    %t  服务器收到请求的时间
                    %r  请求报文的首行信息
                    %>s 响应状态码
                    %b  响应报文的大小，单位是字节，不包报文首部
                    %{Referer}i  请求报文中"Referer"首部的值，当前资源的访问来源，即从哪个页面的链接跳转而来，- 表示直接访问
                    %{User-Agent}i  请求报文中，"User-Agent"首部的值，即发生请求用到的应用程序
            
            10. 路径别名
                DocumentRoot "/www/htdocs"
                http://www.lsu.edu.cn/download/bash-4.1.2-48.el6.x86_64.rpm
                -> /www/htdocs/download/bash-4.1.2-48.el6.x86_64.rpm
                Alias /URL/ "/PATH/TO/SOMEDIR/"，如：
                Alias /bbs/ "/forum/htdocs/"
                http://www.lsu.edu.cn/bbs/index.html
                -> /forum/htdocs/index.html

            11. 设定默认字符集
                AddDefaultCharset UTF-8

            12. 基于用户的访问控制
                认证质询
                    www-authenticate，响应码为401,拒绝客户端请求，并说明要求客户提供账号和密码
                认证
                    Authorization，输入用户名密码后，再次发出送请求，认证通过后，则服务器发送响应资源
                    认证方法
                        basci   明文
                        digest  消息摘要

                安全域：需要用户认证之后方能访问的路径，应通过名称对其进行标识，并用于告知用户原因

                用户的账号密码存储位置
                    虚拟账号，仅用于访问某服务用到的认证标识，可以存储在
                        文本文件
                        SQL数据库
                        ldap
                        nis
                basic认证
                    (1)定义安全域
                        <Directory "">
                            options none
                            AllowOverride none
                            AuthType Basic
                            AuthNmae "STRING"
                            AuthUserFile "/PATH/TO/HTTPD_USER_PASSWD_FILE"
                            Require user username1 username2
                        </Directory>
                        允许账号文件所有用户登录
                            Require Valid-user
                    (2)提供账号和密码存储
                        使用htpasswd
                        htpasswd [options] passwdfile username
                            -c  自动创建 passwdfile，第一次添加用户时使用
                            -m  md5加密密码
                            -s  sha1加密密码
                            -D  删除指定用户
                            htpasswd -c -m /etc/httpd/conf.d/.htpasswd tom
                    (3)实现基于组进行认证
                        <Directory "">
                            options none
                            AllowOverride none
                            AuthType Basic
                            AuthNmae "STRING"
                            AuthUserFile "/PATH/TO/HTTPD_USER_PASSWD_FILE"
                            AuthGroupFile "/PAHT/TO/HTTPD_GROUP_FILE"
                            Require group group1 group2
                        </Directory>
                        要提供用户账号文件和组文件
                            组文件：每行定义一个组
                                GRP_NAME: user1 user2 ...
            
            13. 虚拟主机
                有三种方式实现方案
                    基于IP：为每个主机至少准备一个ip地址
                    基于Port：至少为每个虚拟主机准备一个专用端口(很少用)
                    基于hostname：为每个虚拟主机至少准备一个hostname
                可能会滥用上述三种中的任意方式
                注意：虚拟主机与中心主机不要混用，禁用中心主机，注释 DocumentRoot
                每个虚拟主机都有专用配置

                    <VirtualHost "ip:port">
                        servername
                        DocumentRoot ""
                    </VirtualHost>
                        ServerAlias
                        ErrorLog
                        CustomLog
                        <Directory ""></Directory>

                    示例1：  基于ip
                        <VirtualHost 172.168.100.6:80>
                            ServerName web1.magedu.com
                            DocumentRoot "/vhosts/web1/htdocs"
                        </VirtualHost>

                        <VirtualHost 172.168.100.7:80>
                            ServerName web2.magedu.com
                            DocumentRoot "/vhosts/web2/htdocs"
                        </VirtualHost>


                    示例2：  基于端口

                        <VirtualHost 192.168.112.4:80>
                            ServerName web1.lsu.edu.cn
                            DocumentRoot "/vhosts/web1/htdocs"
                        </virtualHost>
                        <VirtualHost 192.168.112.5:80>
                            ServerName web2.lsu.edu.cn
                            DocumentRoot "/vhosts/web2/htdocs"
                        </virtualHost>
                        <VirtualHost 192.168.112.5:8080>
                            ServerName web3.lsu.edu.cn
                            DocumentRoot "/vhosts/web3/htdocs"
                        </virtualHost>       
                    
                    示例3： 基于主机名    NameVirtualHost 192.168.112.4:80   NameVirtualHost与VirtalHost要一致

                    <VirtualHost 192.168.112.4:80>
                        ServerName web1.lsu.edu.cn
                        DocumentRoot "/vhosts/web1/htdocs"
                    </virtualHost>
                    <VirtualHost 192.168.112.4:80>
                        ServerName web2.lsu.edu.cn
                        DocumentRoot "/vhosts/web2/htdocs"
                    </virtualHost>
                    <VirtualHost 192.168.112.4:80>
                        ServerName web3.lsu.edu.cn
                        DocumentRoot "/vhosts/web3/htdocs"
                    </virtualHost>     

            14. 内置的Status页面
                httpd内嵌有handler，其中有一个handler用于输出当前httpd服务相关状态信息
                    handler: server-status
                    启用handler要使用SetHandler指令
                        handler: 当文件被调用时，apache内部表示形式；一般每种文件类型都有其隐式处理器

                        <Location /server-status>
                            SetHandler server-status
                            Order deny,allow
                            Deny from all
                            Allow from 172.16
                        </Location>

            15. curl命令

                curl是基于URL语法在命令行方式下工作的文件传输工具，它支持FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE及LDAP等协议。curl支持HTTPS认证，并且支持HTTP的POST、PUT等方法， FTP上传， kerberos认证，HTTP上传，代理服务器， cookies， 用户名/密码认证， 下载文件断点续传，上载文件断点续传,，http代理服务器管道（ proxy tunneling）， 甚至它还支持IPv6， socks5代理服务器,，通过http代理服务器上传文件到FTP服务器等等，功能十分强大。

                curl的常用选项：

                    -A/--user-agent <string> 设置用户代理发送给服务器
                    -basic 使用HTTP基本认证
                    --tcp-nodelay 使用TCP_NODELAY选项
                    -e/--referer <URL> 来源网址
                    --cacert <file> CA证书 (SSL)
                    --compressed 要求返回是压缩的格式
                    -H/--header <line>自定义头信息传递给服务器
                    -I/--head 只显示响应报文首部信息
                    --limit-rate <rate> 设置传输速度
                    -u/--user <user[:password]>设置服务器的用户和密码
                    -0/--http1.0 使用HTTP 1.0


            16. 使用mod_deflate模块压缩页面优化传输速度

                SetOutputFilter DEFLATE

                # mod_deflate configuration
                        
                        
                # Restrict compression to these MIME types
                AddOutputFilterByType DEFLATE text/plain 
                AddOutputFilterByType DEFLATE text/html
                AddOutputFilterByType DEFLATE application/xhtml+xml
                AddOutputFilterByType DEFLATE text/xml
                AddOutputFilterByType DEFLATE application/xml
                AddOutputFilterByType DEFLATE application/x-javascript
                AddOutputFilterByType DEFLATE text/javascript
                AddOutputFilterByType DEFLATE text/css
            
                # Level of compression (Highest 9 - Lowest 1)
                DeflateCompressionLevel 9
                
                # Netscape 4.x has some problems.
                BrowserMatch ^Mozilla/4 gzip-only-text/html
                
                # Netscape 4.06-4.08 have some more problems
                BrowserMatch ^Mozilla/4\.0[678] no-gzip
                
                # MSIE masquerades as Netscape, but it is fine
                BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html
            
            17. https，基于ip地址，仅可以使用一个https虚拟主机

        URL:Uniform Resource Locator
            URL方案 scheme
            服务器地址  ip:port
            资源路径
            基本语法
            <scheme>://<user:password>@<host>:<port>/<path>:<params>?<query>#<frag>
                frag：锚点

        http事务
            请求：request
            响应：response
            报文语法格式：
                request报文
                    <method> <request-URL> <version>
                    <headers>


                    <entity body>

                response报文
                    <version> <status> <response-phrase>


                    <entity-body>

            method：请求方法，标明客户端希望服务器对资源执行的动作
                GET：从服务器获取一个资源
                HEAD：只从服务器获取文档首部
                POST：向服务器发送要处理的数据
                PUT：将请求的主体部分存储服务器上
                DELETE：请求删除服务器上指定的文档
                TRACE：追踪请求到达服务器中间经过的代理服务器
                OPTIONS：请求服务器返回对指定资源支持使用的方法

                Version：HTTP/<major>.<minor>
                status:
                    三位数字，如：200 301 404 502
                    标记请求响应处理过程中发生的情况

                reason-phrase(原因短语)
                    状态码所标记状态的简写描述

                headers：
                    每个请求或响应报文可包含任意个首部，每个首部都有首部名称，后面跟一个冒号，而后跟一个可选空格，接着是一个值
                entity-body：请求时附加的数据或响应时附加的数据

            协议查看或分析工具
                tcpdump tshark wireshark

            status(状态码)
                1xx  100 - 101，信息提示
                2xx  200 - 206，成功类的响应
                3xx  300 - 305，重定向类
                4xx  400 - 415，错误类信息，客户端错误
                5xx  500 - 505，错误类信息，服务器端错误

                常用的状态码
                    200 成功，请求的所有数据通过响应报文entity-body部分发送，OK
                    301 请求的URL指向的资源已被删除，但在响应报文中通过首部Location指明了资源现在所处的新位置，Moved Permanenty
                    302 与301相似，但在响应报文中通过Location指明了资源现在所处的临时新位置，Found
                    304 客户端发出了条件式请求，但服务器上的资源未曾发生变化，则响应此状态码，Not Modified
                    401 需要输入账号和密码方能访问资源，Unauthorized
                    403 请求被禁止，Forbidden
                    404 服务器无法找到客户端请求的资源，Not Found
                    500 服务器内部错误，Internal Server Error
                    502 代理服务器从后端服务器收到一条伪响应，Bad Gateway

            headers
                格式  Name: Value
                Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
                Accept-Encoding:gzip, deflate
                Accept-Language:zh-CN,zh;q=0.8
                Cache-Control:max-age=0
                Connection:keep-alive

                首部分类
                    通用首部  请求首部  响应首部  实体首部  扩展首部

                    通用首部
                        Date  报文的创建时间
                        Connection  连接方式(状态)，如 keep-alive  close
                        Via  显示报文经过的中间节点
                        Cache-Control  控制缓存
                    
                    请求首部
                        Accept  通知服务器自己接受的媒体类型
                        Accept-Charset  接受字符集
                        Accept-Encoding  接受编码格式格式，如gzip
                        Accept-Language  接受的语言
                        Client-IP  客户端IP地址
                        Host  请求的服务器名称和端口
                        Referer  包含当前正在请求资源的上级资源
                        User-Agent  客户端代理
                        Except  
                        If-Modified-Since  自从指定时间之后，请求的资源是否发生修改
                        If-Unmodified-Since  自从指定时间之后，请求的资源是否未发生修改
                        If-None-Match  本地缓存中存储的文档的ETag标签是否与服务器的ETag不匹配
                        If-Match  本地缓存中存储的文档的ETag标签是否与服务器的ETag匹配

                    安全请求首部
                        Authorization  向服务器发送认证信息，如账号密码
                        Cookie  客户端向服务器发送的Cookie
                        Cookie2

                    代理请求首部
                        Proxy-Authorization  向代理服务器认证

                    响应首部
                        信息性
                            Age  响应持续时长
                            Server  服务器的软件名称与版本
                        协商首部，其资源有多种表示方法时使用
                            Accept-Ranges  服务器可授受的请求类型范围
                            Vary  服务器查看的其它首部列表
                        安全响应首部
                            Set-Cookie  向客户端设置cookie
                            Set-Cookie2
                            WWW-Authenticate  来自服务器对客户端的质询认证表单
                    
                    实体首部
                        Allow  列出对此实体可使用的请求方法
                        Location  告诉客户端真正实体位于何处
                        Content-Encoding  内容编码格式
                        Content-Language  内容语言 
                        Content-Length  内容长度
                        Content-Range
                        Content-Type  主体对象类型
                        
                        缓存相关
                            ETag  实体扩展标签
                            Expires 实体过期时间
                            Last-MOdified  最后一次修改时间

    httpd-2.4
        新特性
            1. MPM支持运行DSO机制，以模块按需加载
            2. 支持Event MPM
            3. 支持异步读写
            4. 支持模块及每个目录分别使用各自日志级别
            5. 每请求配置 <if>
            6. 增强版表达式解析
            7. 支持毫秒级keep alive timeout
            8. 基于FQDN的虚拟主机，不再需要VirtualHost指令
            9. 支持用户自定义变量

        新模块
            mod_proxy_fcgi
            mod_ratelimit
            mod_remoteip

        修改了一些配置机制
            不再支持Order，deny，allow
        
        安装httpd-2.4
            CentOS 6 
            依赖 apr apr-util [apr-icon]
            apr  apache protable runtime 
            
            编译安装步骤
                1.4+ 版apr和apr util

                前提：安装开发环境，安装pcre-devel

                (1) apr
                    ./configure --prefix=/usr/local/apr
                    make && make install
        
                (2) apr util
                    ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
                    make && make install

                (3) 添加apache组和用户
                    groupadd -r apache
                    useradd -r -g apache apache

                    ./configure --prefix=/usr/local/apache --sysconfdir=/etc/httd24 --enable-so --enable-ssl --enable-cgi --enable-rewrite
                    --with-zlib --with-pcre --with-apr=/sur/local/apr --with-apr-util=/usr/local/apr-util --enable-modules=most --enable-mpms-shared=all --with-mpm=prefork

                    make && make install

        CentOS 7
            用rpm包安装
            配置文件
                主配置文件  /etc/httpd/conf/httpd.conf
                模块配置文件  /etc/httd/conf.modules.d/*.conf
                辅助配置文件  /etc/httpd/conf.d/*.conf

                MPM以DSO机制提供，00_mpm.conf
                服务控制  systemctl {start|stop|restart|status|...} httpd.service

                基于ip访问控制
                    Require ip IPADDR
                    Require not ip IPADDR
                    
                    全部允许或拒绝
                    Require all granted
                    Require all deny

                    默认情况下对目录的访问是拒绝，要做显式授权，要放置在 <RequireAll> 容器中

                基于主机
                    Require host HOSTNAME
                    Require not host HOSTNAME

LAMP
    A apache
    M mariadb mysql
    P php perl python

LAMMP  memcached

    httpd + php
        modules
        cgi
        fast cgi(fpm)

    请求流程  client -> (http) -> httpd -> (cgi) -> application Server(program file) -> (mysql) -> mariadb

    CentOS 7
        程序包  httpd  php  php-mysql  mariadb-server

        启动服务
            systemctl start httpd
            systemctl start mariadb

    CentOS 6
        程序包  httpd  php  php-mysql mysql
  
        启动服务
            service httpd start
            service mysql start

    httpd + php
        httpd prefork  libphp5.so
        httpd worker event libphp5-zts.so

        php配置文件
            /etc/php.ini
            /etc/php.d/*.ini
            rpm -qi php-common
            
MariaDB(mysql)            
    关系型数据库的一种开源实现
    数据结构模型
        层次模型  网状模型  关系模型(二维关系  row  column)
    RDBMS
        mysql mariadb percona-server
        postgreSQL  pgsql  ->  EnterriseDB
        Oracle
        MsSQL

    事务：多个操作当作一个整体对待
        ACID
            A：原子性
            C：一致性
            I：隔离性
            D：持久性

    SQL：Structure Query Language  结构化查询语言
        
    基本概念
        约束：Constraint，向数据表提供数据要遵守的限制
            主键：一个或多个字段组合，填入的数据必做能在本表中惟一标识本行记录，不能为空，Not NULL
            惟一键：一个或多个字段组合，填入的数据必做能在本表中惟一标识本行记录，可以为空
            外键：表中某字段可填入数据取决于另一张表主键已有的数据
            检查性
        
        索引：将表中的一个或多个字段的数据复制一份另存，并且此些数据需要按特定次序排序存储
        
        关系运算
            选择：挑选出符合条件的行(部分)
            投影：挑选出需要的字段
            连接：
        
        数据抽象
            物理层：决定数据存储格式，即RDBMS在磁盘上如何组织文件
            逻辑层：描述DB存储什么数据，以及数据间存在什么样的关系
            视图层：描述DB中的部分数据

        关系模型分类
            实体-关系模型
            基于对象关系模型
            半结构化的关系模型

    安装
        源代码：编译安装
        二进制格式的程序包，展开到特定路径，并简单配置即可使用
        程序包管理器的程序包
            rpm
                OS Vendor
                项目官方
            deb

    MariaDB的特性
        插件式存储引擎：存储管理器，功能和特性均略有差别，用户根据需要灵活选择，存储引擎也称为“表类型”
        更多的存储引擎
            MyISAM -> Aria
            InnoDB - > XtraDB
        诸多扩展的新特性
        较多测试组件
        Truly Open Source

        安装和使用MariaDB
            CentOS 7 直接提供
            CentOS 6
                通用二进制安装过程
                (1)准备数据目录，以/mydata/data为例
                (2)配置MariaDB
                    # groupadd -r mysql
                    # useradd -r -g mysql mysql
                    # tar xf mariadb.VERSION.tar.xz  -C  /usr/local
                    # cd /usr/local
                    # ln -sv mariadb.VERSION mysql
                    # cd mysql
                    # chown root:mysql -R ./*
                    # scripts/mysql-install-db --datadir=/mydata/data  --user=mysql
                    # cp support-files/mysql.server /etc/rc.d/init.d/mysqld (要做一些修改)
                    # chkconfig --add mysqld
                (3)准备配置文件
                    配置文件格式 类ini格式，通过单个文件为各程序提供配置
                    配置文件查找次序
                        /etc/my.cnf -> /etc/mysql/my.cnf -> --default-extra-file=/PATH/TO/CONF-FILE -> ~/.my.cnf
                        /etc/mysql目录可能需要自己创建

                    # cp support-files/my-large.cn /etc/mysql/my.cnf
                        添加三个选项
                            datadir=/mydata/data
                            innodb_file_per_table=on
                            skip_name_resolv=on

    MariabDB的程序组成
        Client
            mysql：ClI交互式客户端程序
            mysqldump  mysqladmin

        Server
            mysqld_safe  mysqld  mysqld_milti

        服务器监听的两种socket地址
            ip socket：监听在tcp的3306端口，支持远程通信
            unix socket：监听在socket文件上(/tmp/mysql.sock，/var/lib/mysql/mysql.sock)，仅支持本地通信

        命令行交互式客户端程序：；mysql
            -uUSERNAME  用户名 默认为root
            -hHOST 服务器主机  默认为localhost
            -pPASSWORD 用户密码  默认为空

            注意：mysql账号由两部分组成，'USERNAME'@'HOST'，其中 HOST 用于限制用户可通过哪些主机连接mysql服务器
            %：匹配任意长度的任意字符，如 172.16.%.%
            _：匹配单个字符

    命令
        客户端命令：本地执行
            mysql> help
            每个命令都有两种方式，如 status   \s
        
        服务器端命令：通过mysql协议发往服务器执行并返回结果
            每个命令都有结束符，默认为分号
    
    关系型数据库常见组件
        数据库：database
        表：table
            行：row  列：column
        索引：index
        视图：view
        用户：user
        权限：privilege
        存储过程：procedure
        存储函数：function
        触发器：trigger
        事件调度器：event scheduler

    SQL语句
        DDL：Data Defination Language
            CREATE DROP ALTER
        DML：Data Manipulation Language
            INSERT DELETE UPDATE SELECT 
            GRANT REVOKE
        
        数据库
            CREATE DATABASE|SCHEMA 'db_name';
            DROP DATABASE|SCHEMA 'db_name';

            SHOW CHARACTER SET;  显示可用字符集
            SHOW COLLATION;  显示排序类型

        表
            CREATE TABLE tb_name (col1 datatyp 修饰符, col2 datatyp 修饰符, ...) ENGINE='InnoDB';
            查看引擎  SHOW ENGINES
            查看表  SHOW TABLES
            查看表结构 DESC[DBNAME.]TABLE_NAME
            删除表 DROP TABLE [IF EXIST] tb_name

    数据类型
        数值型
            精确数值型  整数  十进制
            近似浮点型
                单精度  float
                双精度  double

            整型 int
                tinyint  1
                smallint  2
                midiumint  3
                int  4
                bigint  8

        字符型
            定长字符型
                CHAR(#)  不区分大小写
                BINARY(#) 区分大小写
            变长字符型
                VARCHAR(#)  不区分大小写
                VARBINARY(#)  区分大小写

        对象存储
            TEXT  不区分大小写
            BLOB  区分大小写

        内置类型
            ENUM
            SET

        修饰符 
            NOT NULL  非空
            DEFAULT value   默认值

    博客作业：CentOS 7 LAMP
    练习
        1. vhost1 pma.stux.com  phpMyAdmin，同时提供https
        2. vhost2 wp.stus.com  wordpress
        3. vhost3 dz.stux.com  Discuz        





            









                 
                

            















                














                
                
            




        

        

    




    








