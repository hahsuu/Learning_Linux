Linux Service and Security
    OpenSSL
    OpenSSH
    DNS  BIND
    web：http httpd(apache) php mariadb(mysql)
        lamp
        nginx(tenine)  lnmp
    file server: ftp  nfs  samba
    dhcp  pxe
    iptables

OpenSSL
    NIST
    保密性
        数据保密性
        隐私性
    完整性
        数据完整性
        系统完整性
    可用性
    安全攻击
        被动攻击：窃听
        主动攻击：伪装，重放，消息篡改，拒绝服务
    安全机制
        加密：数字签名，访问控制，数据完整性，认证交换，流量填充，路由控制，公证
    安全服务
        认证，访问控制，
    数据保密性
        连接保密性
        无连接保密性
        选择域保密性
        流量保密性
    数据完整性
    不可否认性

    密码算法和协议
        对称加密
        公钥加密(非对称加密)
        单向加密
        认证协议

    Linux系统：OpenSSL，gpg（PGP的实现）
        对称加密算法，加密解密共用一个密钥
            DES: Data Encryption Standard
            3DES
            AES: Advaced Encryption Standard      128bits  192bits   256bits   384bits   512bits
            Blowfish
            Twofish
            IDEA
            RC6
            CAST5
                特性：
                    1. 加密解密使用同一密钥
                    2. 将原始数据分割成固定大小的块，逐个进行加密
                缺陷：
                    1. 密钥过多
                    2. 密钥分发不安全

        公钥加密，密钥成对出现
            公钥：公开给所有人，pubkey
            私钥：自己保存，必须保证其私密性，secret key
            
            数字签名(身份认证):接受方确认发送方的身份
            密钥交换：发送方用对方的公钥加密对称密钥，并发送给对方
            数据加密
                特点：用公钥加密的数据，只能用与之对应的私钥解密，反之亦然
            算法：RAS DSA ELGamal
        
        单向加密，只能加密，不能解密，提取数据指纹
            特性：定长输出，雪崩效应
            算法：
                md5     128bits
                sha1    160bits
                sha224
                sha256
                sha384
                sha512

            功能：保证数据完整性
    
    密钥交换协议 IKE
        公钥加密
        DH(Deffie-Hellman)
            A: p  g
            B: p  g
            A: x   不公开
            B: y   不公开
            A把 p^x%g 的结果发给B
            B把 p^y%g 的结果发给A

            A 把接收到的结果进行 x 次方运算，即 p^y%g^x
            B 把接收到的结果进行 y 次方运算，即 p^x%g^y
            双方计算等到的结果一致，即为密钥

    PKI Public Key Infrastructure  公钥基础设施
        签证机构：CA
        注册机构：RA
        证书吊销列表：CRL
        证书存取库

        X.509：定义了证书的结构及认证协议标准
            版本号
            序列号
            签名算法ID
            发行者名称
            有效期限
            主体名称
            发行者惟一标识
            主体惟一标识
            扩展
            发行者签名

    SSL: Secure Socket Layer
    TLS: Transport Layer Security
        1995年： SSL 2.0  Netscape
        1996年： SSL 3.0
        1999年： TLS 1.0
        2006年： TLS 1.1
        2008年： TLS 1.2
        2015年： TLS 1.3

        分层设计
            1. 最低层，基础算法原语实现，aes，ras，md5
            2. 向上一层，各种算法的实现
            3. 再向上一层，组合算法实现半成品
            4. 用各种组件拼装而成的种种成品密码学协议和软件，tls，ssh

    OpenSSl：开源项目
        三个组件
            OpenSSL：多用途的命令行工具
            libcrypto：公共加密库
            libssl：库，实现ssl及tls

        OpenSSL命令行
            openssl version  版本号
            标准命令、消息摘要命令、加密算法

            标准命令
                enc  ca  req
            对称加密
                工具：openssl enc   gpg
                算法：3DES  aes  blowfish  twofish

            enc 命令
                加密  # openssl enc -e -des3 -a -salt -in fstab -out fstab.ciphertxt
                解密  # openssl enc -d -des3 -a -salt -in fstab.ciphertxt -out fstab

            单向加密
                工具：md5sum  sha1sum sha224sum ... openssl dgst

                dgst命令
                    openssl dgst md5 /PAHT/TO/SOMEFILE

            MAC  Message Authentication Code，单向加密的一种延伸应用，用于实现在网络通信中保证所传输的数据的完整性
                机制：CBC-MAC   HMAC(使用md5或sha1算法)

            生成用户密码
                passwd命令(openssl的子命令)
                openssl passwd -1 -salt SALT 
            
            生成随机数
                openssl rand -base64|-hex NUM
                NUM表示字节数，-hex，每个字符4位，出现字符数为 NUM*2
            
            公钥加密
                算法：RSA  ELGamal
                加密工具：GPG rasutl

                    数字签名：
                        算法：RSA   DSA(Digital Signature Algorithm,也称DSS，Digital Signature Standard)   ELGamal
                    密钥交换
                        算法：dh
            生成密钥对
                在生成密钥对时，会用到随机数
                
                随机数生成器
                    熵池
                        /dev/rand  仅从熵池中取数据，熵池中数据用尽会阻塞
                        /dev/urand  默认从熵池中取数据，熵池中数据用尽后，会利用软件生成伪随机数，不会阻塞

                生成私钥
                    openssl genrsa -out /PATH/TO/PRIVATE-KYE.FILE 2048
                    例如：openssl genrsa -out prikey 2048
                    (umask 077;openssl genrsa -out prikey 2048)    将属组和其它用户的所有权限去除
                    用小括号将命令括起来，会启动一个子进程来执行括号中的命令，这样就不会改变当前的 umask 的值
                提取公钥
                    openssl ras -in /PATH/TO/PRIVATE-KEY.FILE -pubout 
                    例如：openssl rsa -in prikey -pubout    默认输出到屏幕

DNS and BIND
    DNS：Domain Name Service
        协议：tcp/53 udp/53 C/S架构
        BIND Bekerley Internet Name DNS：Domain  ISC

    本地名称解析配置文件  hosts
        Linux  /etc/hosts
        Windows  %windows%system32/drivers/etc/hosts

        1.1.1.1 www.lsu.edu.cn

    顶级域(一级域)  Top Level Domain   TLD
        com edu mil gov org net int

        三类：；组织域、国家域、反向域

    DNS查询类型
        递归查询
        迭代查询

    解析类型
        name->IP
        IP->name
        注意：正向反向解析是两个不同的空间

    DNS服务器类型
        主DNS服务器
            维护所负责解析的域内解析库(由管理员维护)的服务器
        辅助DNS服务器
            从主DNS服务器或其它从DNS服务器那里复制(区域传递)一份解析库
            序列号：解析库的版本号，前提：主服务器解析内容发生改变，其序列号增加
            刷新时间间隔：从服务器向主服务器请求同步解析库的时间间隔
            重试时间间隔：从服务器向主服务器请求同步解析库失败时，再次尝试的时间间隔
                重试时间间隔应该 小于 刷新时间间隔
            过期时长：从服务器始终联系不上主服务器多长后，放弃服务器角色，停止提供服务
            
            通知机制：当主服务器解析库发生改变，会主动通知从服务器

        缓存DNS服务器
        转发DNS服务器


    FQDN  Full Qualified Domain Name，完全限定域名，例如 www.lsu.edu.cn. 最后的点号不能省略
    一次完整的查询请求经过的流程
        client -> hosts文件 -> DNS Service -> local cache -> DNS Server(Recursion 递归) -> Server cache -> iteration(迭代) 

        解析答案
            肯定答案
            否定答案：请求的条目不存在等原因导致无法返回结果
            权威答案
            非权威答案

    资源记录  Resource Record  RR
    解析库由RR组成
        记录类型：
            SOA：Start Of Authority，起始授权记录，一个区域解析有且仅有一条SOA记录，并且必须出现在第一条
            A：Internet Address，作用，将FQDN -> IP
            AAAA：FQDN -> IPv6
            PTR：PoinTeR，IP -> FQDN
            NS：Name Server，专用于标明当前区域的DNS服务器
            CNAME：Canonical Name，别名记录
            MX：Mail eXchanger，邮件交换器

    资源记录定义的格式
        语法：name [TTL] IN rr_type value
        注意：
            1. TTL，可全局继承
            2. @ 符号可用于引用当前区域名字
            3. 同一个名字可以有多个不同的值，通过多条记录定义多个不同的值，以轮询方式响应
            4. 同一个值也可以有多个不同的名字，通过多条记录定义多个不同的名字，仅表示可通过不同的名字找到一个主机
            5. 相邻的两条资源记录的name相同时，可省略

        SOA：
            name：当前区域的名字，例如“magedu.com.”
            value：
                1. 当前区域的主DNS服务器FQDN，也可以是当前区域的名字，可用 @ 来表示
                2. 当前区域管理员的邮箱地址，地址中不能包含 @ 符号，一般用 . 来替换，如：linux.magedu.com.
                3. (主服务器协调属性的定义及否定答案的统一TTL)
                    例如：
                        magedu.com. 86400 IN SOA ns.magedu.com. nsadmin.magedu.com. (
                            2015042201              ;序列号
                            2H                      ;刷新时间，表示 2 小时
                            10M                     ;重试时间，表示 10 分钟
                            1W                      ;过期时间，表示 1 周
                            1D                      ;否定答案的TTL值
                        )

        NS：
            name：当前区域名字
            value：当前区域的某DNS服务器的主机名，如 ns.magedu.com.
            一个区域可以有多个DNS服务器(多条记录)
            例如：
                magedu.com. IN NS ns1.magedu.com.
                magedu.com. IN NS ns2.magedu.com.
            注意：
                对于NS记录而言，任何一条NS记录的服务器主机名，都应该在后续有一条A记录

        MX：
            name：当前区域名字
            value：当前区域的某邮件服务器的主机名，如 mx.magedu.com.
                value之前应该有一个数字(0-99)，表示此服务器优先级，一个区域内的MX记录可有多条
            例如：
                magedu.com. IN MX 10 mx1.magedu.com.
                            IN MX 20 mx2.magedu.com.
            注意：
                对于MX记录而言，任何一条MX记录的服务器主机名，都应该在后续有一条A记录

        A：
            name：某主机的完整名字，FQDN，如 www.magedu.com.
            value：主机对应的IP地址
            例如：
                www.magedu.com. IN A 1.1.1.1
                www.magedu.com. IN A 1.1.1.2

        注意：
            *.magedu.com. IN A 1.1.1.4          ;泛域名解析
            可通过泛域名解析，解析至特定地址，来避免用户输错名称，DNS给出否定答案，
            magedu.com. IN A 1.1.1.4

        AAAA：
            name：FQDN
            value：IPv6

        PTR：
            name：IP，有特定格式，把IP地址反过来写 1.2.3.4 要写作 4.3.2.1，还要加上特定后缀，in-addr.arpa.  
                完整的名字为： 4.3.2.1.in-addr.arpa.
            value：FQDN
            例如： 4.3.2.1.in-addr.arpa. IN PTR www.magedu.com.
            有简写方式，假设 1.2.3 是网络号，那么上述记录可写成：
                4. IN PTR www.magedu.com.
                网络地址和后缀可省略，主机IP地址要反写

        CNAME：
            name：别名的FQDN
            value：正式名字FQDN
            例如：
                web.magedu.com. IN CNAME www.magedu.com.

    子域授权，每个域的名称都是通过上级解析服务器在解析库中进行授权
        类根域授权 tld

            .com.   IN      NS      ns1.com.
            .com.   IN      NS      ns2.com.
            ns1.com.     IN      A       2.2.2.1
            ns2.com.     IN      A       2.2.2.2

        magedu.com.  在.com的名称服务器上的解析库添加资源记录

            magedu.com.     IN      NS      ns1.magedu.com.
                            IN      NS      ns2.magedu.com.
                            IN      NS      ns3.magedu.com.
            
            ns1.magedu.com.     IN      A          3.3.3.1
            ns2.magedu.com.     IN      A          3.3.3.2 
            ns3.magedu.com.     IN      A          3.3.3.3

            glue record  粘合记录

    域名注册
        代理商：万网，新网，godaddy
        注册完成之后，想用自己的专用服务器解析：
            管理后台，把NS记录指向服务器名称和A记录指向服务器地址

    BIND的安装配置
        dns服务，程序包名 bind，程序名 named
        程序包
            bind
            bind-lib
            bind-utils
            bind-chroot  /var/named/chroot

    bind
        服务脚本：/etc/rc.d/init.d/named
        主配置文件：
            /etc/named.conf     /etc/named.rfc1912.zones       /etc/rndc.conf     /etc/rndc.key    

        rndc：remote name domain controller  953/tcp
            默认安装在同一主机，且只能通过 127.0.0.1 来连接 named，提供辅助性功能

        解析库文件
            /var/named/ZONE_NAME.zone
            
            注意：
                1. 一台物理服务器可同时为多个区域提供解析
                2. 必须有根区域文件 默认为 named.ca
                3. 应该有两个甚至更多(如果启用IPv6)实现localhost名称正反解析库和本地回环地址127.0.0.1反向解析库

        主配置文件：
            全局配置
                options{};
            日志子系统配置
                logging{};
            区域定义：本机能为哪些zone进行解析，就要定义哪些zone
                zone "ZONE_NAME" IN {};

            注意：任何服务如果期望及能被通过网络被其它主机访问，至少要监听在一个能与外部主机通信的IP地址上

        缓存名称服务器的配置
            监听外部地址即可
            dnssec：
                建议关闭 dnssec  将 yes -> no
            allow-query { any; };

        主dns名称服务器
            1. 在主配置文件中定义区域
                zone "ZONE_NAME" IN {
                    type { master|slave|hint|forward };
                    file "ZONE_NAME.zone";
                };

                例如：
                    zone "magedu.com" IN {
                        type master;
                        file "magedu.com.zone";
                    };

            2. 定义区域解析库文件
                出现的内容：宏定义   资源记录
                例如：
                    $TTL 86400
                    $ORIGIN magedu.com.
                    @       IN      SOA         ns1.magedu.com.     admin.magedu.com.   (
                            2015042201
                            1h
                            5m
                            7d
                            1d)
                            IN      NS                  ns1.magedu.com.
                            IN      NS                  ns2.magedu.com.
                            IN      MX      10          mx1               ;是 mx1.magedu.com. 的简写
                            IN      MX      20          mx2
                    ns1     IN      A                   172.16.100.11
                    ns2     IN      A                   172.16.100.13
                    mx1     IN      A                   172.16.100.18
                    mx2     IN      A                   172.16.100.22
                    www     IN      A                   172.16.100.11
                    ftp     IN      A                   172.16.100.100


                注意：应该修改解析库文件的权限，640，同时将文件的属组改为 named 组

        测试命令
            
            dig [@server]  [-t type] name [queryopt...]
            dig用于测试dns系统，不会解析hosts文件

            查询选项
                +[no]trace      是否跟踪解析过程
                +[no]recurse    是否进行递归解析
            dig -x IP @SERVER       进行反向查询

            host命令
            host [-t type] name [SERVER]

            nslookup命令
            交互式模式
                nslookup>
                server IP       指明使用哪个dns服务器进行查询    
                set q=RR_TYPE   指明查询资源记录类型
                NAME            要查询的名称

        反向区域
            区域名称：网络地址反写.in-addr.arpa.
            172.16.100 -> 100.16.172.in-addr.arpa.
            1. 定义区域
                zone  "ZONE_NAME"  IN {
                    type { master | slave | forward };
                    file "网络地址.zone"
                }
            2. 区域解析库
                注意：不需要 MX A AAAA 记录，以 PTR 为主

                $TTL 1D
                $ORIGIN 100.16.172.in-addr.arpa.
                @       IN          SOA          ns1.magedu.com.     admin.magedu.com.   (
                                        2015042201
                                        1h
                                        5m
                                        7d
                                        1d )
                        IN          NS              ns1.magedu.com.
                        IN          NS              ns2.magedu.com.

                11      IN          PTR             ns1.magedu.com.
                12      IN          PTR             ns2.magedu.com.
                18      IN          PTR             mx1.magedu.com.
                12      IN          PTR             www.magedu.com.

        模拟全量传送
            dig -t axfr ZONE_NAME @SERVER
            dig -t axfr magedu.com @172.16.100.11

        主从复制
            1. 应该是一台独立的名称服务器
            2. 主服务器区域解析库文件中，必须有一条ns记录指向从服务器
            3. 从服务器是需要定义区域，解析库文件应放置于 /var/named/slaves 目录中
            4. 主服务器得允许从服务器作区域传送
            5. 主从服务器时间应该同步，可通过ntp服务
            6. bind程序的版本应该保持一至，否则应从高主低

            定义从区域方法
            zone "ZONE_NAME" IN {
                type slave;
                masters { MASTER_IP; };
                file "slaves/ZONE_NAME.zone";
            };

            例如：
            zone "magedu.com" IN {
                type slave;
                masters { 172.16.100.11; };
                file "slaves/magedu.com.zone";
            };                                      

        rndc
            rndc(953/tcp)           
            rndc COMMAND
                COMMAND
                    reload  重新载入主配置文件和解析库文件
                    reload zone  重新载入解析库文件 
                    retransfer zone  手动传送区域，不管序列号
                    notify  手动必通知
                    reconfig  重新载入主配置文件
                    querylog  开启或关闭查询日志
                    trace  递增debug级别
                    trace LEVE  指定使用debug级别，0 为不启用debug

        子域授权
            正向解析区域子域方法
                定义一个子区域
                ops.magedu.com.         IN      NS      ns1.ops.magedu.com.
                ops.magedu.com.         IN      NS      ns2.ops.magedu.com.
                ns1.ops.magedu.com.     IN      A       1.1.1.1
                ns2.ops.magedu.com.     IN      A       1.1.1.2

                定义转发服务器
                    注意：被转发的服务器要能够为请求做递归，否则转发不予进行
                全部转发：凡是非本机所负责的区域的请求，都转发给指定服务器

                    options {
                        forward { first|only; };
                        forwarders { FORWARD_IP; };
                    };
                
                区域转发，仅转发特定区域的请求至某服务器
                    zone "ZONE_NAME" IN {
                        type forward;
                        forward { first|only; };
                        forwarders  { FORWARD_IP; };
                    };

                /ect/named.conf
                    options {
                        forward first;
                        forwarders { 172.16.0.1; };
                    };

                /etc/named.rfc1912.zones
                    zone "magedu.com" IN {
                        type forward;
                        forward only;
                        forwarders { 172.16.100.11; };
                    };
                    
                    注意：关闭 dnssec
                        dnssec-enable no;
                        dnssec-validator no;

        bind中基础的安全相关配置
            acl：把一个或多个主机归并成一个集合，并通过一个统一的名称调用

            acl ACL_NAME {
                IP;
                IP;
                net/prelen;
            };
            示例：
                acl mynet{
                    172.16.0.0/16;
                };

            bind中有四个内置acl
                none  没有一个主机
                any   任意主机
                local 本机
                localnet  本机IP同掩码计算之后的网络

            注意：只能先定义后引用，因此一般定义在options之前

            访问控制指令
                allow-query {};  允许查询的主机：白名单
                allow-transfer {};  允许区域传送的主机：白名单
                allow-recurseion {};  允许递归的主机：白名单
                allow-update {};  允许更新解析库的内容

        bind view
            视图：一个bind服务器可以定义多个view，每个view可以定义一个或多个zone，每个view用来匹配的客户端
            每个view内可能需要对同一个区域进行解析，但使用不同的解析库文件
            
            view VIEW_NAME {
                match_clients {};
            };

            注意：
                1. 一旦启用view，所有的zone只能定义在view中
                2. 仅有匹配允许递归请求的客户所在的view中需要定义根区域
                3. 客户端请求到达时，是自上而下检查匹配，一旦匹配，就停止

        CDN  Content Delivery Network

        编译安装
            1. 下载源码   www.isc.org
            2. 解压
            3. 添加组和用户
                groupadd -r -g 53 named
                useradd -r -g 53 -u 53 named

            4. ./config --prefix=/usr/local/bind9
                        --sysconfdir=/etc/named
                        --disable-chroot
                        --enable-threads
            5. make && make install

OpenSSH
    ssh：Secure SHell   protocol  22/tcp   安全的远程登录
    OpenSSH是ssh协议的开源实现
    dropbear是另一个开源实现
    ssh协议版本
        V1  基于CRC-32做MAC，不安全，man-in-middle
        V2  双方主机协议选择MAC方式，基于DH算法交换密钥，基于RSA或DSA来实现身份认证

    两种认证方式：
        基于passwor
        基于key

    OpenSSH基于C/S架构来实现
        client：ssh scp sftp
        server：sshd

        客户端组件
            配置文件：/etc/ssh/ssh_config
        服务器端
            配置文件：/etc/ssh/sshd_config
    ssh命令
        格式：
            ssh [user@]hostname [COMMAND]
            ssh -l user hostname [COMMAND]
        如果用户省略，会以当前登录系统正在使用的用户登录远程主机
        选项：
            -p PORT  指定远程服务器端监听的端口
            -X X11转发
            -Y 信任的主机X11转发
    
    基于密钥认证方式
        1. 在客户端生成密钥对
            ssh-keygen -t rsa [-p ''] [-f "~/.ssh/id_rsa"]
        2. 把公钥传输至远程服务器的家目录
            ssh-copy-id [-i [indentity-file]] [user@]hostname
        3. 测试

    scp命令
        scp [options] SRC... DEST
        存在两种情形
            pull 
                scp [options] [user@]host:/PATH/FROM/SOMEWHERE /PATH/TO/SOMEWHERE
            push
                scp [options] /PATH/TO/SOMEWHERE [user@]host:/PATH/FROM/SOMEWHERE
        常用选项：
            -r  递归
            -p  保持文件属性信息
            -q  静默模式
            -P PORT  指明远端主机端口(大写P)

    sftp命令
        sftp [user@]host
            sftp> help

    sshd配置文件
        常用参数
            Port  22022
            ListenAddress 
            PermitRootLogin no    不允许root用户登录
            MaxAuthTries 3    密码最多试错次数
            UseDNS no
            AllowUsers user1 user2   白名单
            AllowGroups grp1 grp2    白名单

    ssh服务最佳实践
        1. 不要使用默认端口
        2. 禁止使用protocol version 1
        3. 限制可登录用户
        4. 设定空闲会话超时时长
        5. 利用防火墙设置ssh访问策略
        6. 仅监听特定的IP地址
        7. 使用强密码策略
            tr -dc A-Za-z0-9_ < /dev/urandom | head -c 30
        8. 基于密钥的认证
        9. 禁止使用空密码
        10. 禁止root用户直接登录
        11. 限制ssh的访问频度和并发在线数
        12. 做好日志，经常分析

    dropbear
        1. 生成密钥
        2. dropbear -p [ip:]port -F -E

OpenSSL
    三个组件
        openssl：多用途的命令行工具
        libcrypto：公共加密库
        libssl：库，ssl和tls协议的实现

    PKI Public Key Infrastructure
        CA
        RA
        CRL  吊销证书列表
        证书存取库

    建立私有CA
        OpenCA
        OpenSSL

        证书申请及签署步骤
            1. 生成申请请求
            2. RA核验
            3. CA签署
            4. 获取证书

        创建私有CA
            openssl配置文件  /etc/pki/tls/openssl.cnf

            1. 创建所需文件
                touch /etc/pki/CA/index.txt
                echo 01 > /etc/pki/CA/serial
            
            2. CA自签证书
                (1) (umask 077; openssl genrsa -out /etc/pki/CA/private/cakey.pem 2048)
                (2) openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 7300 -out /etc/pki/CA/cacert.pem
                    -new   生成新证书签署请求
                    -x509  专用于生成CA自签证书
                    -key  生成请求用到的密钥文件
                    -days n  证书有效期
                    -out /PATH/TO/SOMEWHERE  证书保存路径

            3. 发证
                (1)用到证书的主机生成证书请求
                    (umask 077; openssl genrsa -out /etc/httpd/ssl/httpd.key 2048)
                    openssl req -new -key /etc/httpd/ssl/httpd.key -days 365 out /ect/httpd/ssl/httpd.csr
                (2)把证书文件传递给CA
                (3)CA签署证书，并将证书发给申请者
                    openssl ca -in /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365

            4. 吊销证书
                (1)客户端：获取证书的serail
                    openssl x509 -in /PAHT/FROM/CERT_FILE -noout -serial -subject
                (2)CA端：先根据客户端提交的serial和subject信息对比检验是否与index.txt文件中的信息一致，如一致，则吊销证书
                    openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem
                (3)首次吊销：生成吊销证书的编号
                    echo 01 > /ect/pki/CA/crlnumber
                (4)更新证书吊销列表
                    openssl ca -gencrl -out /thisca.crl
                     
            查看证书信息
                openssl x509 -in /PATH/FROM/CERT_FILE -noout -text | -subject | -serial

            查看crl文件
                openssl crl -in /PATH/FROM/CRL_FILE.crl -noout -text

                













                
                
            




        

        

    




    








