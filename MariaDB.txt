MariaDB or MySQL

	DBMS
	RDBMS：关系型数据库管理系统
		C/S：通过专有协议
		关系模型：表(行，列)，二维关系

		范式：第一范式、第二范式、第三范式
		关系运算：
			选择
			投影

		数据库：表，索引，视图(虚表)
			SQL：Structure Query Lnaguage
				DDL，DML
				编程接口：
					存储过程
					存储函数
					触发器：
					事件调度器
					过程式编程：选择，循环

		三层模型：
			物理层
			逻辑层
			视图层

		解决方案：
			Oracle，Sybase，Informix，DB2
			MySQL，MariaDB，PostgreSQL，SQLite

		MySQL -> 5.1 -> 5.5 -> 5.6 -> 5.7
		MariaDB
			插件式存储引擎
				SHOW ENGINES;
			单进程多线程
				连接线性
				守护线程
		配置文件：集中式的配置，能够为mysql的各应用程序提供配置信息
			[mysqld]
			[mysql_safe]
			[mysql_multi]
			[server]
			[mysql]
			[mysqldump]
			[client]

				parameter = value

				skip-name-resolve
				skip_name_resolve

				查找路径：/etc/my.cnf -> /etc/mysql/my.cnf -> $MYSQL_HOME/my.cnf -> --default-extra-file=/path/to/dir/my.cnf -> ~/.my.cnf
		安装方法：
			os vendor：rpm
			MySQL：
				rpm
				展开可用
				源码

			安装后的设定
				1. 为所有root用户设定密码
					mysql> SET PASSWORD
					mysql> UPDATE mysql.user SET password=PASSWORD('your_pass') WHERE cluase;
					# mysqladmin 

				2. 删除所有匿名用户
					mysql> DROP USER ''@'localhost';

					上述两步骤可运行命令：mysql_secure_installation

				3. 建议关闭主机名反解功能

			元数据数据库：mysql
				user，host等

			mysql -> mysqld
				客户端程序：
					mysql：交互式CLI工具
					mysqldump：备份工具，基于mysql协议向mysql发起查询请求，并将查得的所有数据转换成相应的SQL语句，保存到文本文件中
					mysqladmin：基于mysql协议管理mysqld
					mysqlimport：数据导入工具

				非客户端类的管理工具
					myisamchk，myisampack

				如何获取程序默认使用的配置
					mysql --print-defaults
					mysqld --print-defaults

				客户端类应用程序的可用选项
					-u, --user=
					-h, --host=
					-p, --password=
					-P, --port=
					--protocol={tcp|sock}
					-S, --socket=
					-D, --database=
					-C, --compress

					mysql -e "SQL语句"

				mysql的使用模式
					交互式模式
						可运行命令有两类：
							客户端命令：
								\h, help
							服务器端命令
								SQL，需要语句结束符

					脚本模式
						# mysql -uUSERNAME -hHOST -pPASSWORD < /path/from/somefile

						mysql > source /paht/from/somefile

				服务器端(mysqld)：工作特性有多种定义方式
					命令行选项
					配置文件参数

						获取可用参数列表
							mysqld --help  --verbose

						获取运行中的mysql进程使用各参数及其值
							msyql> SHOW GLOBAL VARIABLES;
							mysql> SHOW SESSION VARIABLES;

							注意：其中有些参数支持运行修改，并会立即生效，有些参数不支持，只能修改配置文件，并重启服务进程生效。有些参数的作用域是全局的，且不可改变，有些可以为每个用户提供单独的设置

						修改服务器变量的值
							mysql> help SET

							全局：
								mysql> SET GOBAL system_var_name=value;
								mysql> SET @@global.system_var_name=value;

							会话：
								msyql> SET [SESSION] system_var_name=value;
								mysql> SET @@[SESSION.]system_var_name=value;

						状态变量：用于保存mysqld运行中的统计数据的变量
							mysql> SHOW GLOBAL STATUS;
							mysql> SHOW [SESSION] STATUS;

	SQL：ANSI SQL标准
		SQL-86，SQL-89，SQL-92，SQL-99，SQL-03

	MySQL的数据类型
		字符型
			CHAR, BINARY: 定长数据类型，
			VARCHAR, VARBINARY: 变长数据类型，需要结束符
			TEXT: TINYTEXT, TEXT, MEDIUMTEXT, LOGNTEXT
			BLOG: TINYBLOG, BLOG, MEDIUMBLOG, LONGBLOG
			ENUM, SET

		数值型
			精确数值型
				整型: TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT
				十进制型: DECIMAL
			近似数值型
				浮点型
					FLOAT
					DOUBLE
		日期时间型
			DATA
			TIME
			DATATIME
			TIMESTAMP
			YEAR(2), YEAR(4)

		字符修饰符
			NOT NULL：非空约束
			NULL：
			DEFAULT 'STRING'：指明默认值
			CHARACTER SET：使用的字符集
			COLLATION：使用的排序规则 

			mysql> SHOW CHARACTER SET;
			mysql> SHOW COLLATION;

		整型数值修饰符
			NOT NULL
			NULL
			DEFAULT NUMBER

			AUTO_INCREMENT
				UNSIGNED
				PRIMARY KEY | UNIQUE KEY
				NOT NULL

				mysql> SELECT LAST_INSERT_ID();

		日期时间修饰符
			NOT NULL
			NULL
			DEFAULT

		内建类型ENUM和SET修饰符
			NOT NULL
			NULL
			DEFAULT

	SQL MODE：定义mysql对约束的响应行为
		修改方式：
			mysql> SET GLOBAL sql_mode='MODE';
			mysql> SET @@global.sql_mode='MODE';

			需要修改权限，仅对修改后新创建的会话有效，对已经建立的会话无效

			mysql> SET SESSION sql_mode='MODE';
			mysql> SET @@session.sql_mode='MODE';

		常用MODE：TRADITIONAL, STRICT_TRANS_TABLES, STRICT_ALL_TABLES

	SQL：DDL，DML
		DDL：数据定义语言
			CREATE, ALTER, DROP

			数据库组件：数据库，表，索引，视图，用户，存储过程，存储函数，触发器，事件调度器等

			CREATE相关的常用命令
				   CREATE DATABASE
				   CREATE EVENT
				   CREATE FUNCTION
				   CREATE FUNCTION UDF
				   CREATE INDEX
				   CREATE LOGFILE GROUP
				   CREATE PROCEDURE
				   CREATE SERVER
				   CREATE TABLE
				   CREATE TABLESPACE
				   CREATE TRIGGER
				   CREATE USER
				   CREATE VIEW

		DML：数据操作语言
			INSERT, DELETE, UPDATE, SELECT

		数据库：
			CREATE, ALTER, DROP
				{DATABASE|SCHEMA}
				[IF EXISTS]
				[IF NOT EXISTS]

		表：二维关系
			设计表：遵循规范

			定义：字段，索引
				字段：字段名，字段数据类型，修饰符
				约束，索引：应该创建在经常用作查询条件的字段上
					索引：实现级别在存储引擎
						分类：
							稠密索引、稀疏索引
							B+索引，hash索引，R树索引，FULLTEXT索引
							聚集索引，非聚集索引
							简单索引，组合索引

			创建表：CREATE TABLE
				1. 直接创建
				2. 通过查询现存的表创建，新表会被直接插入查询而来的数据
					CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
					    [(create_definition,...)]
					    [table_options]
					    [partition_options]
				3. 通过复制表现存的表的表结构，不复制数据
					CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
    					{ LIKE old_tbl_name | (LIKE old_tbl_name) }

    			注意：Storage Engine是指表类型，也即在表创建时指明其使用的存储引擎
    				同一个库中的表要使用同一种存储引擎

    		查看表结构
    			DESCRIBE tal_name;

    		查看表状态信息
    			SHOW TABLES

    			SHOW [FULL] TABLES [{FROM | IN} db_name]
    [				LIKE 'pattern' | WHERE expr]

    		修改表：ALTER TABLE
    		删除表：DROP TABLE

    单进程多线程
    	用户连接：连接线程

    	MySQL数据文件类型
    		数据文件、索引文件
    		重做日志、撤消日志、二进制日制、错误日志、查询日志、慢查询日志、中继日志

    DDL & DML：
    	索引管理
    		按特定数据结构存储的数据

    	索引类型：
    		聚集索引、非聚集索引：数据是否与索引存储在一起
    		主键索引、辅助索引：
    		稠密索引、稀疏索引：是否索引了每一个数据项
    		B+ TREE、HASH、R TREE

    		左前缀索引
    		覆盖索引

    	管理索引的途径：
    		创建索引：创建表时指定：CREATE INDEX
    		创建或删除索引：修改表的命令

    		查看表上索引
				SHOW {INDEX | INDEXES | KEYS}
				    {FROM | IN} tbl_name
				    [{FROM | IN} db_name]
				    [WHERE expr]

			EXPLAIN

		视图：VIEW
			虚表

			创建方法：
				CREATE
				    VIEW view_name [(column_list)]
				    AS select_statement
				    [WITH [CASCADED | LOCAL] CHECK OPTION]

			删除视图：
			DROP VIEW [IF EXISTS]
			    view_name [, view_name] ...
			    [RESTRICT | CASCADE]


			视图中的数据事实上存储于“基表”中，因此，其修改操作也会针对基表实现，其修改操作受基表限制

	DML：
		INSERT, DELETE, UPDATE, SELECT

		INSERT
			一次插入一行或多行数据
			Syntax：

			INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
			    [INTO] tbl_name [(col_name,...)]
			    {VALUES | VALUE} ({expr | DEFAULT},...),(...),...
			    [ ON DUPLICATE KEY UPDATE
			      col_name=expr
			        [, col_name=expr] ... ]

			INSERT tbl_name [(col1,...)] VALUES (val1,...), (val21,...)

			Or:

			INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
			    [INTO] tbl_name
			    SET col_name={expr | DEFAULT}, ...
			    [ ON DUPLICATE KEY UPDATE
			      col_name=expr
			        [, col_name=expr] ... ]

			Or:

			INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
			    [INTO] tbl_name [(col_name,...)]
			    SELECT ...
			    [ ON DUPLICATE KEY UPDATE
			      col_name=expr
			        [, col_name=expr] ... ]

		DELETE:
			DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name
			    [WHERE where_condition]
			    [ORDER BY ...]
			    [LIMIT row_count]  

			注意：一定要有限制条件，否则将清空表中所有数据
				限制条件
					WHERE
					LIMIT

		UPDATE:
			UPDATE [LOW_PRIORITY] [IGNORE] table_reference
			    SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
			    [WHERE where_condition]
			    [ORDER BY ...]
			    [LIMIT row_count]

		    注意：一定要有限制条件，否则将修改表中所有行的数据
			限制条件
				WHERE
				LIMIT

		SELECT

			Query Cache

			查询执行路径中的组件：查询缓存、解析器。预处理器、优化器、查询执行引擎、存储引擎

			SELECT语句执行流程
				FROM Clause -> WHERE Clause -> GROUP BY -> HAVING Clause -> ORDER BY -> SELECT -> LIMIT

		单表查询

			SELECT
			    [ALL | DISTINCT | DISTINCTROW ]
			      [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
			    select_expr [, select_expr ...]
			    [FROM table_references
			    [WHERE where_condition]
			    [GROUP BY {col_name | expr | position}
			      [ASC | DESC], ... [WITH ROLLUP]]
			    [HAVING where_condition]
			    [ORDER BY {col_name | expr | position}
			      [ASC | DESC], ...]
			    [LIMIT {[offset,] row_count | row_count OFFSET offset}]
			    [FOR UPDATE | LOCK IN SHARE MODE]]

			    DISTINCT: 数据去重
			    SQL_CACHE: 显式指定查询结果存储于缓存中
			    SQL_NO_CACHE: 显式指定查询结果不予缓存

			    query_cache_type的值为'ON'时，查询缓存功能打开
			    	SELECT的结果符合缓存条件即会缓存，否则，不予缓存
			    	显式指定SQL_NO_CACHE，不予缓存
			    query_cache_type的值为'DEMAND'时，查询缓存功能按需进行
			    	显式指定SQL_CACHE的SELECT语句才会缓存，其它均不予缓存

			字段显示可以使用别名
				cola AS alias1, col2 AS alias2

			WHERE子句：指明过滤条件以实现“选择”的功能
				过滤条件：布尔型表达式

				算法操作符：+, -, *, /, %
				比较操作符：=, !=, <>, <=>, >, >=, <, <=

					BETWEEN min_num AND max_num
					IN(element1, element2, ...)
					IS NULL: 取值为空
					IS NOT NULL
					LIKE
						%：任意长度的任意字符
						_：任意单个字符
					RLIKE
					REGEXP: 匹配字符串可用正则表达式书写模式

				逻辑操作符
					NOT
					AND
					OR
					XOR

			GROUP BY: 根据指定的条件把查询结果进行“分组”以用于做“聚合”运算
				avg(), max(), min(), count(), sum()

				SELECT avg(Age), Gender FROM students GROUP BY Gender;

				SELECT avg(Age) as AAage, Gender FROM students GROUP BY Gender HAVING AAge > 20;

				SELECT count(StuId) as NOS, ClassId FORM students GROUP BY ClassID HAVING NOS > 2;

				HAVING: 对分组聚合运算后的结果指定过滤条件

			ORDER BY: 根据指定的字段对查询结果进行排序
				升序：ASC
				降序：DESC

				SELECT Name, Age FROM students ORDER BY Age DESC;

			LIMIT[[offset,]row_count]: 对查询结果进行输出数量限制

				SELECT Name, Age FROM students ORDER BY Age DESC LIMIT 10;
				SELECT Name, Age FROM students ORDER BY Age DESC LIMIT 10, 10;

			对查询结果中的数据请求施加“锁”
				FOR UPDATE: 写锁，排他锁
				LOCK IN SHARE MODE: 读锁，共享锁

		多表查询：
			交叉连接：笛卡尔乘积

			内连接：
				等值连接：让表之间的字段以“等值”建立连接关系
				不等值连接
				自然连接
				自连接

			外连接
				左外连接
					FROM tb1 LEFT JOIN tb2 ON tb1.col = tb2.col
				右外连接
					FROM tb1 RIGHT JOIN tb2 ON tb1.col = tb2.col

		子查询：在查询语句嵌套着查询语句
			基于某语句的查询结果再次进行查询

			用在WHERE子句中的子查询
				1. 用于比较表达式中的子查询，子查询仅能返回单个值
				2. 用于IN中的子查询，子查询应该单键查询并返回一个或多个值从而构成列表
				3. 用于EXISTS

			用于FROM子句中的子查询
				使用格式：SELECT tb_alias.col1, ... FROM (SELECT clause) WHERE Clause;

		联合查询：UNION
			


























