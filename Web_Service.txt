nginx(web server，web reverse server)
	
	I/O类型
		同步和异步：synchronous，asynchronous
		关注消息通知机制
		同步：调用不会立即返回，但一旦返回，即是最终结果
		异步：调用会立即返回，但返回的不是最终结果，被调用者通过状态通知机制来通知调用者，或通过回调函数来处理结果
		
		阻塞和非阻塞：block，nonblock
		关注的是调用者等待被调用者返回调用结果时的状态
		阻塞：调用结果返回之前，调用者会被挂起，调用者只有在得到返回结果之后才能继续
		非阻塞：调用者在调用结果返回之前，不会被挂起，即不会阻塞调用者
		
	I/O模型
		blocking IO
		nonblocking IO
		IO Multiplexing  复用型IO  select()，poll()
		Signal Driven IO  事件驱动式IO
			通知方式：水平触发（多次通知）  边缘触发（只通知一次）
		asynchronous IO  异步IO
		
		一次read操作
			1. 等待数据准备好，从磁盘到内核内存
			2. 数据从内核内存复制到进程内存
			
	nginx  engin X
		Tengine（Taobao）
		
		特性：
			模块化设计，较好的扩展性（不支持动态装载）
			高可靠
			低内存消耗，据有关实验，10K个keep-alive模式下的连接，仅需2.5MB内存
			支持热部署，不停机而更新配置文件，日志滚动，升级程序版本
			支持事件驱动，AIO，mmap
			
		基本功能：
			静态资源的web服务器，能缓存打开的文件描述符
			http，smtp，pop3协议的反向代理服务器
			缓存加速，负载均衡
			支持FastCGI(fpm, LNMP)，uWSGI(python)等
			模块化(非DSO机制)，过滤器，ZIP，SSI及图像大小调整
			支持SSL
			
		扩展功能：
			基于名称和IP的虚拟主机
			支持keepalive
			支持平滑升级
			定制访问日志，支持使用日志缓冲区，提供日志存储
			支持url rewrite
			支持路径别名
			支持基于IP及用户的访问控制
			支持速率和并发数限制
			
		基本架构：
			一个master进程，生成多个worker进程
			事件驱动：epoll(边缘触发)，kqueue(BSD) /dev/poll(Solaris)
				复用器：select, poll, rt signal
			支持sendfile，sendfile64
			支持AIO
			支持mmap
		
		工作模式，非阻塞事件驱动一个master进程生成多个worker线程，每个worker响应n个请求
		
		模块类型：
			核心模块
			Standard HTTP modules
			mail modules
			3rd party modules
			
		安装方法：
			源码编译安装
			制作好的程序包，rpm包
			
			编译安装
			
				yum install gcc openssl-devel pcre-devel zlib-devel 

				# groupadd -r nginx
				# useradd -r -g nginx -s /bin/false -M nginx

				./configure \
				  --prefix=/usr \
				  --sbin-path=/usr/sbin/nginx \
				  --conf-path=/etc/nginx/nginx.conf \
				  --error-log-path=/var/log/nginx/error.log \
				  --http-log-path=/var/log/nginx/access.log \
				  --pid-path=/var/run/nginx/nginx.pid  \
				  --lock-path=/var/lock/nginx.lock \
				  --user=nginx \
				  --group=nginx \
				  --with-http_ssl_module \
				  --with-http_flv_module \
				  --with-http_stub_status_module \
				  --with-http_gzip_static_module \
				  --http-client-body-temp-path=/var/tmp/nginx/client/ \
				  --http-proxy-temp-path=/var/tmp/nginx/proxy/ \
				  --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \
				  --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \
				  --http-scgi-temp-path=/var/tmp/nginx/scgi \
				  --with-pcre
				make && make install

		配置文件：
			main配置段，包括event段（定义event模型工作特性），全局有效
			http{} http协议相关配置
			
			配置指令要以分号结尾
				directive value1 [value2 ...];
			支持使用变量
				内置变量：模块会提供内建变量
				自定义变量：set var_name value
				
			主配置段的指令
				用于调试、定位问题
				正常运行必备的配置
				优化性能配置
				事件相关配置
				
		nginx主配置段内容
			正常运行必备配置
				1. user USERNAME [GROUPNAME];
				指定运行nginx的用户和组
				user nginx nginx;
				2. pid /path/to/pid_file;
				指定nginx守护进程的pid文件
				pid /var/run/nginx/nginx.pid;
				3. worker_rlimit_nofile #
				指定所有worker进程所能打开的最大文件句柄数
			
			性能优化相关配置
				1. worker_processes #;
				worker进程个数，通常应略少于CPU物理核心数
				2.worker_cpu_affinity cupmask ...;
				优点：提升CPU缓存命中率，无法避免进程切换
				cupmask
					0000 0001
					0000 0010
					0000 0100
				work_cpu_affinity 00000001	00000010 00000100;    worker进程分别限定在第1，2，3个核心上
				3. timer_resolution #;
				计时器解析度，降低此值（配置增大数值），可减少gettimeofday()系统调用的次数
				4. worker_priority #
				指定worker进程的nice值
				-20 - 20
				100 - 140
			
			事件相关配置
			1. accetp_mutex {on|off};
			master调度用户请求到各worker进程时用的负载均衡锁，on表示能让worker轮流的，序列化的响应请求
			2. lock_file file;
			accetp_mutex用到的锁文件路径
			3. use [epoll|rtsig|select|poll];
			指明使用的事件模型，建议让nginx自行选择
			4.worker_connections #;
			设定单个worker进程能处理的最大并发数
			worker_connections 10240
			worker_connections * worker_processes
			
			用于调试定位问题
			1. daemon{on|off};
			是否能守护进程方式运行nginx，调试时可设定为off
			2. master_process {on|off};
			是否以master/worker模型运行nginx
			3. error_log file [level];
			error_log 文件 级别
			若要使用debug级别，要在编译时使用 --with-debug选项
			
    总结：常需要调整的参数
        worker_processes
        worker_connections
        worker_cpu_affinity
        worker_priority

    新改动配置生效方式
        nginx -s reload
            stop  quit  reopen

    nginx作为web服务器的配置
        http{}: 由ngx_http_core_module模块引入
        配置框架
            http {
                upstream{

                }
                server {                #每个Server类似httpd的虚拟主机，可出现多次
                    location URL{       #类似httpd中的<location>，用于定义URL与本地文件系统的映射关系
                        root "/path/to/somedir";
                        if ... {

                        }
                    }
                }
            }

        注意：与http相关的指令仅能放置于 http server location upstream if 上下文中，但有些指令只能应用于上述上下文中的某几种中

        配置指令
            1. server {}
            定义一个虚拟主机
            server {
                listen 8080;
                root "/vhosts/web1";
                server_name www.magedu.com;
            }

            2. listen
            指定监听地址和端口
            listen address[:port];
            listen port;

            3. server_name NAME[....]
            后可跟多个主机名，可使用正则表达式(~)和通配符
                (1)先做精确匹配
                (2)左侧通配符检查，*.lsu.edu.cn
                (3)右侧通配符检查，mail.*
                (4)正则表达式匹配检查，如： ~ ^.*\.mageedu\.com$
                (5)default server

            4. root path;
            设置资源路径映射，用于指明请求URL所对应的资源在文件系统上的起始路径

            5. location [= | ~ | ~* | ^~] uri {}
               location @name
                功能：允许根据用户请求的uri来匹配定义的各location，匹配到时，此请求将被相应的location配置块中的配置所处理，例如，做访问控制功能
                = : 精确匹配检查
                ~ : 正则表达式模式匹配检查，区分大小写
                ~* : 正则表达式模式匹配检查，不区分大小写
                ^~ : URI的前半部分匹配，不检查正则匹配

                匹配优先级：精确匹配(=), ^~, ~, ~*, 不带任何符号location

            6. alias path；
            用于定义路径别名，用在location中
            注意：root表示指明路径为对应的location的“/” URL，alias表示路径映秀，即location指令后定义的URL是相对于alias所指明的路径而言
            location /images/ {
                root "/vhosts/web1";
            }
            http://www.lsu.edu.cn/images/a.jpg -> /vhosts/web1/images/a.jpg

            location /images/ {
                alias "/www/picture"
            }
            http://www.lsu.eud.cn/images/a.jpg -> /www/picture/a.jpg

            7. index file;
            默认主页面
            index index.html index.php;

            8. error_page code [=code] uri | @name
            根据http响应状态码指明错误页面
            error_page 404 /404_customed.html
            [=code] 以指定的响应码代替原来的响应码，对客户端进行状态码响应

            9. 基于IP的访问控制
            allow ip/network
            deny ip/network

            10. 基于用户的访问控制
            basic  digest
            auth_basic "";
            auth_basic_user_file  /path/to/usre_file;

            例如：
                auth_basic "Only For VIP";
                auth_basic_user_file /etc/nginx/users/.htpasswd

            用户和密码建议用htpasswd生成

            11. https服务
            生成私钥，生成证书签署请求，并获得证书
                server {
                    listen 433 ssl;
                    server_name www.lsu.edu.cn;
                    ssl_certificate /etc/nginx/ssl/nginx.crt;
                    ssl_certificate_key /etc/nginx/ssl/nginx.key;

                    ssl_session_cache shared;SSL:1m;
                    ssl_session_timeout 5m;

                    ssl_ciphers HIGH:!aNULL:!MD5;
                    ssl_prefer_server_ciphers on;

                    location / {
                        root /vhosts/web1;
                        index index.html index.htl;
                    }
                }

            12. stub_status {on|off};
            仅能用于location上下文
            结果示例：
                locatiion /status {
                    stub_status on;
                    allow 172.16.0.0/16;
                    deny all;
                }

            13. rewrite regex replacement flag;
            例如：
                rewrite ^/images/(.*\.jpg)$  /imgs/$1 break;

            flag:
                last: 一旦此rewrite规则重写完成之后，不再被后面的规则处理，而由User Agent重新对该重写之后的URL再一次发起请求，并从头开始与重写规则进行匹配检查
                break: 一旦此rewrite规则重写完成之后，由User Agent重新对该重写之后的URL再一次发起请求，且不会再次与重写规则进行匹配检查
                redirect: 以302响应码(临时重定向)返回新的URL
                permanent: 以301响应码(永久重定向)返回新的URL

            14. if
                语法：if (condition) {}
                应用环境：server location

                condition
                (1)变量名，变量名为空串，或以“0”开头，则为false，其它为true
                (2)以变量为操作数构成比较表达式，可使用 =  !=  类似的比较操作符进行测试
                (3)正则表达式模式匹配检查
                    ~  区分大小写
                    ~*  不区分大小写
                    !~   !~*  对上述两种操作取反
                (4)测试路径存在性  -f     ! -f
                (5)测试目录存在性  -d     ! -d 
                (6)测试文件存在性  -e     ! -e
                (7)文件是否有执行权限  -x  ! -x
                例如：
                    if ($http_user_agent ~* MSIE) {
                        rewrite ^(.*)$ /msie/$1 break;
                    }

            15. 防盗链
                location ~* \.(jpg|jpeg|gif|png)$ {
                    valid_referer none blocked www.magedu.com;
                    if ($invailid_referer) {
                        rewrite ^/ http://www.magedu.com/403.html break;
                    }
                }

            16. 定制访问日志
            log_format

        网络连接相关配置
            1. keepalive_timeout #;
            长连接超时时长，默认为75s

            2. keepalive_requests #;
            在一个长连接上所能允许请求的最大资源数

            3. keepavlive_disable [msie6|safari|none];
            为指定User Agent禁用长连接

            4. tcp_nodelay on | off;
            是否对长边接使用tcp_delay选项，所谓的tcp_delay，指的是tcp会将多个小数据包合并成一个大的数据包之后，再进行发送

            5. client_header_timeout #;
            读取http请求报文首部超时时长

            6. client_body_timeout #;
            读取http请求报文body超时时长

            7. send_timeout #;
            发送响应报文的超时时长



HAProxy

    KV: Key - Value
    取模法
    一致性hash算法：consistent hash
    偏斜：虚拟节点

    LB
        tcp：lvs  haproxy nginx
        appliation layer：
            http: haproxy  nginx  ats  apache
            mysql: mysql-proxy

    HAProxy：代理(http)，掮客(broker)
        正向代理
        反向代理

    代理作用：web缓存(加速)，反向代理，内容路由(根据流量及内容等类型将请求转发至特定服务器)
    转码器
    在代理服务器上添加Via首部
    缓存的作用：
        减少冗余内容传输
        节省带宽，缓解网络瓶颈
        降低原始服务器的请求压力
        降低传输延迟

    HAProxy：只是http协议反向代理，不提供缓存功能，但额外支持tcp层，对基于tcp通信的应用做LB

    nginx

        server {
            location ~* \.php$ {
                proxy_pass
            }

            location / {

            }
     
        }

        proxy_pass:

        upstream { 
            leastconn
            server
            server

        }

    haproxy
        frontend
            use_backend
            default_backend
        backend
            balance
            server
            server

        listen

        default

    配置文件：haproxy.conf
        全局配置
        代理配置


    回顾
        HAproxy
            http协议反向代理
            tcp层LB

            特性：event-driven, ebtree

        配置：/etc/haproxy/haproxy.cfg
            /usr/sbin/haproxy

            CentOS 6: /etc/rc.d/init.d/haproxy
            CentOS 7: haproxy.service

            配置分为两段：
                global
                    配置参数：log, maxconn, ...
                proxies
                    default, frontend backend listen

            示例：
                frontend main *:80
                    default_backend websrvs

                backend websrvs
                    balance roundrobin
                    server web1 172.16.100.68 check
                    server web1 172.16.100.69 check
HAProxy(2)
    代理参数：
        balance: 指明调度算法
            动态：权重可动态调整
            静态：调整权重不会实时生效

            roundrobin：轮询，动态算法，每个后端主机最多支持4128个连接
            static-rr：轮询，静态算法，每个后端主机支持的数量无上限
            leastconn：根据后端主机的负载数量进行调度，仅适用于长连接的会话，动态算法
            source：
                hash-type：
                    map-based：取模法，静态
                    consistent：一致性哈希法，动态
            uri：
                hash-type
                    map-based：取模法，静态
                    consistent：一致性哈希法，动态
            url_param：根据url中指定的参数的值进行调度，把值做hash计算，并除以总权重，可以实现session绑定的效果
                hash-type
                    map-based：取模法，静态
                    consistent：一致性哈希法，动态
            hdr(<name>)：根据请求报文中指定的header(如user_agent, referer, hostname)进行调度，将指定的值做hash计算
                hash-type
                    map-based：取模法，静态
                    consistent：一致性哈希法，动态

        bind：
            指明监听的地址和端口，可使用多次，只能用于frontend，listen

        mode：
            HAproxy的工作模式：默认为tcp
            mode {tcp|http|health}

        hash-type
            map-based：取模法，静态
            consistent：一致性哈希法，动态

        log：

        maxconn

        default_backend：
            为frontend指明使用的默认后端

        use_backend：条件式后端调用
            use_backend dynamic if url_dyn
            use_backedn static if url_css url_img

        server：
            server <name> <address>[:port] [param*]
                backup：设定当前server为backup server
                check：健康状态检测
                    inter <delay>：检测时间间隔，单位为ms，默认为2000ms
                    fall <count>：up -> down, soft state, soft state, hard state
                    rise <count>：donw -> up
                cookie <value>：为指定的server设定cookie
                maxconn <value>：此服务器接受的并发连接的最大数量
                maxqueue <value>：请求队列的最大长度
                observ <mode>：根据流量判断后端服务器的健康状态
                weight：指定权重，默认为1，最大为256，0表示不被调度
                redir <prefix>：重定向，所有发往此服务器的请求均以302响应

            后端为http服务器时健康状态的检测方法
                option httpchk

            使用案例
                server first 172.16.100.7:80 cookie first check inter 1000

        基于浏览器cookie实现session sticky： 
            backedn websrvs
                balance roundrobin
                cookie SERVERID insert nocache indirect
                server web1 172.16.100.68:80 check weight 1 cookie websrv1
                server web1 172.16.100.69:80 check weight 3 cookie websrv1
            要点：
                1. 每个server有自己惟一的cookie标识
                2. 在backend中定义为用户请求调度完成后操纵其cookie

        启用stats
            listen statistics
                bind *:9090
                stats enable
                stats hide-version
                #stats scop .
                stats uri /haproxyadmin?stats
                stats realm "HAProxy\ Satistics"
                stats auth amdin:magedu
                stats admin if TRUE

        向日志中记录额外信息
            capture request header
            capture response header

        当mode为http时，记录丰富的日志信息
            option httplog

        错误页面重定向
            errorfile：使用harproxy主机本地文件
            errorloc, errorloc302：使用指定的url进行响应，响应状态码为302，不适用于GET以外的请求方法
            errorloc303：返回303状态码

    访问控制： 
        http-request
        tcp_request

    添加请求或响应报文首部
        reqadd
        rspadd

    ACL
        定义，及调用

    作业
        1. 基于cookie实现会话绑定
        2. 基于uri实现调度
        3. 基于hdr实现调度
        4. 动静分离
            基于lamp部署discuz，而动静分离
        5. 用keepavlived高可用haproxy


			
			
			
			
			
			
		
		
		
		
			
							
			
	
		
			
		









