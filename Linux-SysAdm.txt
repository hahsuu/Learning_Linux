Linux系统管理
    主要内容：
        磁盘管理、文件管理
        RAID 基础原理	LVM2
        网络管理：TCP/IP协议，Linux网络属性
        程序包管理：RPM，yum
        进程管理：htop，glance，tsar等
        sen和awk
        Linux系统开机流程
        内核管理的基础知识，编译内核，模块
        Linux系统裁减
        Kernel+busybox
        课外作业：LFS
回顾：find，特殊权限，if语句
Linux磁盘管理
    IO Port：I/O设备地址
    一切皆文件，字符设备，块设备
    设备文件：关联至一个设备的驱动程序，进而能够与之对应的设备进行通信
    设备号码：
        主设备号：major number，标识设备的类型
        次设备号：minor number，标识同一类型下的不同设备
    /dev/DEV_FILE
    磁盘的接口类型：
        并口：
        IDE	133MB/S
        SCSI：640MB/S
        串口：
        SATA：6Gpbs
        SAA：6Gpbs
        USB：480MB/S
    磁盘设备文件命名
        IDE：/dev/hd[a-z]
        其它：//dev/sda[a-z]
        不同的设备：a-z，如：/dev/sda，/dev/sdb，……
        同一设备不同分区，1，2，3，……，如：/dev/sda1，/dev/sda2，……
    机械硬盘的工作方式
        track：磁道
        cylinder：柱面
        secto：扇区
        如何分区：按柱面
        MBR：Master Boot Record
        0磁道，0扇区，512bytes
        bootload：446bytes
        分区表：64bytes，每16bytes标识一个分区，最多4个主分区
        标记位：2bytes，5A
        磁盘转速单位：rpm，rotations per minute
        UEFI，GPT？
    分区管理工具：
        fdisk：对于一块硬盘最多管理15个分区
        fdisk -l [-u] [device...]
        # fdisk device
        子命令：
            p 	print 显示已有分区
            n 	new，创建分区
            d 	delete，删除分区
            w	write，写入修改并退出
            q 	quit，放弃修改并退出
            m	获取帮助信息
            l	list，列出分区id
            t	调整分区id
        cat /proc/partitions，查看内核是否忋识别分区
        通知内核重新读取磁盘分区表信息：
            partx
            partx -a /dev/sda
            partx --a -n 4:6 /dev/sda
            kpartx -a /dev/sda
                -f : force
            CentOS 5上使用 partprob
            partprob /dev/sda
Linux文件系统管理
    Linux文件系统：
        ext2, ext3, ext4, XFS, btrfs, reisefs, jfs, swap(交换分区)
    光盘文件系统，iso9660
    Windows fat32, NTFS
    Unix FFS, UFS, JFS2
    网络文件系统 NFS, CIFS
    集群文件系统 GFS2, OCFS2
    分布式文件系统 ceph, moosefs, mogilefs, glusterfs, lustre
    根据其是否支持日志“journal”功能，分为
    日志型：extras，……
    非日志型：extr2
    文件系统的组成部分：
    内核中的模块：ext4，xfs

    用户空间的管理工具：
    mkfs.ext2  mkfs.xfs
    Linux的虚拟文件系统：VFS
    创建文件系统：
    mkfs.FS_TYPE /dev/DEVICE
    FS_TYPE：
        ext4
        xfs
        btrfs
        vfat
    mkfs -t FS_TYPE /dev/DEVICE
        -L “ABELE“	设置卷标
    mke2fs：ext系列文件系统专用工具
        -t {ext2|ext3|ext4}
        -b {1024|2048|4096}	块大小
        -L “ABELE“	设置卷标
        -j 相当于 -t ext3
        mkfs.ext3 = mkfs -t ext3 = mke2fs  -j = mke2fs -t ext3
        -i # 为数据空间每多少个字节创建一个inode，此大小不应该小于块的大小
        -N # 为数据空间创建多少个inode
        -m # 为管理人员预留的空间占据的百分比，默认为5%
        -O FEATURE[, ...] 启用特性
           ^FEATURE 关闭特性
    mke2fs -b 1024 -m 3 -L "MYDATA" /dev/sda4
    mkswap：创建交换分区
    -L “LABEL”
    前提是要将分区的id调整为82
    其它工具：
        blkid：块设备属性信息查看
        blkid [options]  device [device ...]
        -U UUID：根据UUID查找设备
        -L LABEL：显示卷标为LABEL的设备、
        e2label：管理ext系列文件系统的LABEL
        e2label device [ new-label ]  查看或设置卷标
        tune2fs：重新设定ext系列文件系统可调整的参数
        -l  查看超级块信息
        -L  “LABEL” 修改卷标
        -m #  修改预留给管理员的百分比
        -j  将ext2 -> ext3
        -O  文件系统属性启用禁用
        -o  调整挂载选项
        -u  UUID  修改UUID
    dumpe2fs
        -h  查看超级块信息
    文件系统检测
        fsck： File System Check
        fsck.FS_TYPE  或  fsck -t FS_TYPE
    Note：FS_TYPE，一定要与文件系统相同
        -a  自动修改错误
        -r  交互式修复
        e2fsck：ext系列文件系统专用检测工具
        -y  自动回答yes
        -f  强制修复
回顾：
    磁盘接口类型，磁盘分区，fdisk，mkfs，mke2fs，tune2fs，dumpe2fs，e2label，blkid
    vfs：虚拟文件系统
    xfs，ext{2|3|4}，btrfs

文件系统管理
    将额外的文件系统与根文件系统上的目录建立关联关系，进而使该目录作为访问其它文件系统的入口的行为称之挂载
    解除关联有关系的过程称之为卸载
    挂载点：Mount Point
    mount
        把要挂载的设备关联至挂载点
    umount
        卸载时，用设备或挂载点之一即可
    注意：持载点的原有文件，在挂载完成时，会被临时隐藏
    挂载方法：
        mount：只显示当前挂载的设备
        mount [-fnrsvw] [-t vfstype] [-o options] device dir
        device表示要挂载的设备，可用如下方式表示：
            设备文件，如 /dev/sda5
            卷标，-L “LABEL“，如，-L "MYDATA"
            UUID，-u UUID，如，-u “xxxxx-xxxx”
            伪文件系统名称，如proc，sysfs，devtmpfs，configfs
        dir，挂载点
            事先存在，建议为空目录，如，/application/httpdocs
        注意：在使用过程中，设备无法被卸载
        常用选项：
            -t vfstype，指明要挂载的文件系统类型，可省略
            -r readonly，只读挂载
            -w read and write，读写挂载
            -a 自动挂载定义在 /etc/fstab 文件中，且挂载选项中具有“自动挂载”的所有设备
            -n 在挂载该设备时，不更新 /etc/mtab 文件
            -L “LABEL”，以卷标指定要挂载的设备
            -u UUID，以UUID指定要挂载的设备
            -B --bind，又称绑定，挂载目录到另一个目录

        cat /proc/mounts
        查看内核追踪到已挂载的所有设备

        挂载文件系统的选项  -o option
            async   异步模式
            sync    同步模式
            atime/noatime   访问文件时，是否自动更改 accsess time 一般是atime，包含目录文件
            diratime/nodiratime 是否更改目录访问时间戳
            auto/noauto 是否支持自动挂载
            exec/noexec 是否支持文件系统上的应该程序运行为进程
            dev/nodev   是否支持在些文件系统上使用设备文件
            suid/nosuid 是否支持suid
            remount 重新挂载
            ro/rw   只读/读写
            user/nouser 是否允许普通用户挂载此设备，一般不允许
            acl 启用此文件系统的 acl 功能
            注意：上述选项可多个同时使用，用逗号分割
            默认挂载选项：defaults，包括 rw, suid, dev, exec, auto, nouser, async
        
    卸载命令
        umount DEVICE
        umount MOUNT_POINT
        查看正在访问指定文件系统的进程
            fuser -v MOUNT_POINT
        终止所有正在访问指定文件系统上的进程
            fuser -km MOUNT_POINT
        
    挂载交换分区
        启用：swapon
        禁用：swapoff

        swapon [option]...  [DEVICE]
            -a 激活所有交换分区        
            -p PRIORITY，指定优级级，优先级是一个数字
        swapoff：类似swapon
    
    内存空间使用状态
        free [option]
            -m 以MB为单位
            -g 以GB为单位
    文件系统空间占用等信息查看命令
        df
            -h human-readable
            -i instead of blocks
            -p 表示 posix 格式输出，不会分行        
    目录单体空间占用状态查看
        du [option]...  dir
            -h --human-readable
            -s summary
    命令总结：mount umount free df du swapon swapoff fuser

    文件挂载配置文件
        /etc/fstab，每行定义一个要挂载的文件系统
        要挂载的设备或伪文件系统    挂载点     文件系统类型      挂载选项    转储频率    自检次序

        要挂载的设备或伪文件系统，可以是设备文件，LABEL(LABEL="")，UUID(uuid=""),伪文件系统名称(proc, sysfs)
        挂载点
        挂载选项，defaults
        转储频率，0：不做备份，1：每天转储，2：每隔一天转储
        自检次序，0：不自检，1：首先自检，一般只有根文件系统才用1

文件系统上的其它概念
    Inode，Index node，索引结点
    地址指针：
        直接指针，间接指针，三级指针
    inode bitmap：对伴标识每个inode空间与否的状态
    链接文件
        硬链接：
            不能对目录进行
            不能跨分区进行
            指向同一个inode的多个不同路径，创建硬链接，即为inode创建新的引用路径，因此会增其引用次数
        符号链接，也称为软链接
            可以对目录进行
            可以跨分区进行
            指向的是另一个文件的路径，其大小为指向路径字符串的长度，不会增加或减少目标文件inode的引用计数
        ln [sv] SRC DEST
            -s symbolic link
            -v verbose

bash脚本编程之用户交互
    read [option]... [name,..]
        -p "PROMPT"
        -t TIMEOUT(数值) 指明超时时间
    检测bash脚本语法错误
        bash -n /path/to/some_script
    调试执行
        bash -x /path/to/some_script

回顾：
    mount/umount fstab配置文件 ext文件系统的基础原理
    read bash
    /etc/fstab
    ext super, block GDT(组描述表) inode table, block bitmap, dumpe2fs -h, tune2fs -l
    硬链接，软链接

RAID  Redundant Array of Inexpensive Disks，廉价冗余磁盘陈列
      Redundant Array of Independent Disks，独立冗余磁盘陈列
      Berkeley A case for Redundant Array of Inexpensive Disks  RAID

    提高IO能力，磁盘并行读写，加缓存，外部供电
    提高耐用性，通过磁盘冗余完成
    级别：多块磁盘组织在一起的工作方式有所不同
    RAID实现方式
        外接式磁盘阵列，通过扩展卡提供适配能力
        内接式RAID，主板集成RAID控制器
        software RAID
    级别：level
        RAID-0  0，条带卷
        RAID-1  1，镜像卷
        RAID-2  
        RAID-3
        RAID-4
        RAID-5
        RAID-6
        RAID-10
        RAID-01

        RAID-0：
            读写性能提升
            可用空间：N*min(s1,s2,...)
            无容错能力
            最少磁盘数：2，2+
        RAID-1：
            读性能提升，写性能略有下降
            可用空间：1*min(s1,s2,...)
            有冗余能力
            最少磁盘数：2，2+

        RAID-2，RAID-3不常用
        RAID-4: 类似RAID-0，再加一块用来存放校验码的磁盘
        RAID-5：类似RAID-4，但校验码循环存在至每块磁盘上
            读写性能提升
            可用空间：(N-1)*min(s1,s2,...)
            有容错能力：1块磁盘
            最少磁盘数：3，3+
        RAID-6：在RAID-5的基础上，增加一块磁盘用来存储校验码
            读写性能提升
            可用空间：(N-2)*min(s1,s2,...)
            有容错能力：2块磁盘
            最少磁盘数：4，4+
        RAID-10
            读写性能提升
            可用空间：N*min(s1,s2,...)/2
            有容错能力，每组镜像最多能坏一块
            最少磁盘数：4，4+
        RAID-01，RAID-50，RAID-7
        JBOD：Just a Bunch of Disks
            功能：将多块磁盘空间合并成一个在的连续空间
            可用空间：sum(s1,s2,...)
        常用级别：RAID-0, RAID-1, RAID-5, RAID-10, RAID-50, JBOD
        
    实现方式
        硬件实现方式
        软件实现方式
            CentOS 6 上的软件RIAD的实现，结合内核中的 md(multi devices)
            mdadm：模式化的工具
            命令语法格式
                 mdadm [mode] <raiddevice> [options] <component-devices>
                 raiddevice，/dev/md#
                 component-devices，任意块设备
                 支持的RAID级别：LINAR, RAID0, RAID1, RAID4, RAID5, RAID6, RAID10
                 模式：-C 创建 -A 装配 -F 监控 -f -r -a 管理
                 -C，创建模式
                    -n # 使用#个块来创建此RAID
                    -l # 指明要创建的RAID级别
                    -a {yes|no} 是否创建目标RAID设备的设备文件
                    -c CHUNK_SIZE 指明块大小
                    -x # 指明空闲盘的个数
                -D 显示RAID的详细信息
                
                管理模式
                    -f 标记磁盘为损坏
                        例如：mdadm /dev/md# -f /dev/sdc
                    -a 添加磁盘
                    -r 移除磁盘

                    观察md的状态
                        cat /proc/mdstat
                    
                    停止md设备
                        -S --stop
                        md -S /dev/md#
                    彻底删除md设备
                        1. 停止md设备
                            md --stop /dev/md0
                        2. 移除md设备
                            md --remove /dev/md0
                        3. 将相关块设备的超级重写
                            mdadm --zero-superblock /dev/sd{c,d,e,f}

LVM2：Logic Volume Manager Version 2
    dm，device mapper，将一个或多个底层块设备组织成一个逻辑设备的模块，/etc/dm#
    /dev/mapper/VG_NAME-LV_NAME     /dev/VG_NAME/LV_NAME
    /dev/mapper/VolGroup-lv_root    /dev/VolGroup/lv_root

    PV管理工具
        pvs，简要显示pv信息
        pvdisplay，pv详细信息显示
        pvcreate，/dev/DEVICE：创建pv

    VG管理工具
        vgs，简要显示vg信息
        vgdisplay
        vgcreate  [option...]   VolumeGroupName PhysicalDevicePath [PhysicalDevicePath...]
            -s #[bBsSkKmMgGtTpPeE]
        vgextend VolumeGroupName PhysicalDevicePath [PhysicalDevicePath...]
        vgreduce VolumeGroupName [PhysicalVolumePath...]

    LV管理工具
        lvs
        lvdisplay
        lvcreate -L|--size LogicalVolumeSize[b|B|s|S|k|K|m|M|g|G|t|T|p|P|e|E] -n|--name LogicalVolume{Name|Path} VolumeGroup
    扩展逻辑卷
        lvextend  -L|--size [+]LogicalVolumeSize[bBsSkKmMgGtTpPeE]} LogicalVolumePath
        resize2fs /dev/VG_NAME/LV_NAME
    缩减逻辑卷
        umount /dev/VG_NAME/LV_NAME
        e2fsck -f /dev/VG_NAME/LV_NAME
        resize2fs /dev/VG_NAME/LV_NAME #[mMgGtT]
        lvreduce -L [-]#[mMgGtT] /dev/VG_NAME/LV_NAME
        mount
    快照
        lvcreate -L #[mMgGtT] -p r -s -n snapshot_lv_name original_lv_name

文件系统挂载使用
    挂载光盘设备
        光盘设备文件
            IDE：/dev/hdc
            SATA：/dev/sr0
            符号链接文件，/dev/cdrom
            
            mount -r /dev/cdrom /media/cdrom
        dd命令，转换及复制文件
            用法
                dd if=/PATH/FROM/SRC of=/PATH/TO/DEST
                bs=#，block size，复制单元大小(字节)
                count=#，复制的块数量
            磁盘拷贝
                dd if=/dev/sda of=/dev/sdb
            备份MBR
                dd if=/dev/sda of=/tmp/mbr.bak bs=512 count=1
            破坏MBR的bootload
                dd if=/dev/zero of=/dev/sda bs=256 count=1
        两个特殊设备
            /dev/null  数据黑洞
            /dev/zero  吐零机

btrfs文件系统
    技术预览版
    Btrfs(B-tree，Butter-tree，Better-tree)，GPL，2007 oracle
    核心特性
        1. 多卷(物理)支持，可由多个物理卷组成，支持RAID，联机添加，移除和修改
        2. 写时复制更新机制(CoW)，复制、更新及替换指针，而非“就地更新”
        3. 数据及元数据校验码，checksum
        4. 子卷，sub_volume
        5. 快照，支持快照的快照
        6. 支持透明压缩
    文件系统创建
        mkfs.btrfs
            -L "LABEL"
            -d <profile> RAID0, RAID1, RAID5, RAID6, RAID10, Single，数据块组
            -m <profile>  RAID0, RAID1, RAID5, RAID6, RAID10, dup，元数据块组
            -O <feature>
            -O list-all 列出支持所有特性
    属性查看
        btrfs filesystem show
    挂载文件系统
        mount -t btrfs /dev/sdb MOUNT_POINT
    透明压缩机制
        mount -o compress={lz0|zlib} DEVICE MOUNT_POINT
    
    子命令：filesystem, device, balance, subvolume

压缩、解压缩及归档工具
    compress/upcompress,  .z
    gzip/gunzip,  .gz
    bzip2/bunzip2,  .bz2
    xz/unxz,  .xz
    tar  cpio

    1. gzip/gunzip
        gzip [ -acdfhlLnNrtvV19 ] [-S suffix] [--rsyncable] [ name ...  ]
            -d 解压缩，相当于gunzip
            -c 将压缩的结果输出至标准输出，可重定向，不会操作原文件
            -# 指定压缩比，默认压缩比是 6
        zcat，不显式展开的前提下，查看文本文件的内容
    2. bzip2/bunzip2
        bzip2 [ -cdfkqstvzVL123456789 ] [ filenames ...  ]
            -k keep，保留原文件
            -d 解压缩
            -# 压缩比(1-9)，默认为 6
     3. xz/unxz
        xz [option]...  [file]...
            -k keep，保留原文件
            -d 解压缩
            -# 压缩比(0-9)，默认为 6
    4. tar
        tar [OPTION...] [FILE]...
        (1)创建归档
            tar -cf /PATH/TO/SOMEWHERE.tar FILE ...
        (2)查看归档文件中的文件列表
            tar -tf /PATH/TO/SOMEWHERE.tar
        (3)展开归档
            tar -xf /PATH/TO/SOMEWHERE.tar
            tar -xf /PATH/TO/SOMEWHERE.tar -C /PATH/TO/DIR  展开至指定的目标目录
        
        结合压缩工具，归档并压缩
            -j  bzip2       -z  gzip        -J  xz

bash脚本编程
    condition
        bash命令
        用命令的执行状态结果，成功为true，失败为false
        成功或失败的意义，取决于用到的命令
        
    if语句        bash -n     bash -x
        单分支
            if condition; then
                if-true
            fi
        双分支
            if condition; then
                if-true
            else
                if-false
            fi
        多分支
            if condition1; then
                if-true
            elif condition2; then
                if-true
            elif condition3; then
                if-true
            ...
            else
                all-false
            fi
            逐条件进行判断，第一次遇到为“真”条件时，执行其分支，而后结束
    注意：if语句可以嵌套

    循环 for while until
        for循环
        循环体：要执行的代码，可能要执行n遍
        进入条件
        退出条件

        for 变量名 in 列表; do
            循环体
        done

        执行机制：依次将列表中的元素的值赋给“变量名”，每次赋值后即执行一次循环体中的语句，直到列表中的元素耗尽，循环结束
        
        列表的生成方式：
            1. 直接给出字符串列表
            2. 整数列表
                (1) [start..end]
                (2) $(seq [start [step] end])  要使用命令引用
            3. 返回列表的命令
                $(COMMAND)，如，$(ls /var)
            4. glob，文件名通配方式，如，/var/*
            5. 变量引用 
                $@   $*

Linux程序包管理（1）
    API：Application Programming Interface
    POSIX Portable OS
    程序源代码 -> 预处理 -> 编译 -> 汇编 -> 链接
    静态编译
    动态编译  .so

    ABI application Binary Interface    应用程序二进制接口
    Windows与Linux不兼容
        库级别虚拟化
        Linux WINE
        Windows Cywin

    应用级开发   java python php perl ruby
    系统级开发   c c++

    二进制应用程序的组成部分
        二进制可执行文件  库文件  配置文件  帮助文件
    
    程序包管理器
        debian:  deb  dpt
        redhat:  rpm
            rpm  Redhat Package Manager
            RPM is Package Manager
    
    源码包
        name_VERSION.tar.gz
            VERSION
                major.minor.release
    rpm包命名方式
        name_VERSION-release.arch.rpm
            VERSION：major.minor.release，同源码包保持一致
            release.arch，rpm包版本号，release.os.arch
            zlib-1.2.7-13.e17.i686.rpm
            常见的arch
                x86: i386 i486 i586
                x86_64: x64 x86_64 amd64

    拆包，在有些情况下，程序包过大或者功能过多，在制件程序包往往按功能拆分为多个包
        主包  testapp-VERSION-ARCH.rpm
        支包，子包，分包  testapp-devel-VERSION-ARCH.rpm

    包之间存在依赖关系
        yum，rpm包管理器的前端工具
        apt-get，deb包管理器的前端工具
        zypper，suse上的rpm前端管理工具
        dnf，Fedora 22+，rpm包管理器前端管理工具

    查看二进制程序所依赖的库文件
        ldd /PATH/TO/BINARNY_FILE
    管理及查看本机装载的库文件
        ldconfig
            -p 显示本机已经缓存的所有可用库文件的文件名及文件路径的对应关系
            配置文件：
                /etc/ld.so.conf
                /etc/ld.so.conf.d/*.conf
            缓存文件：
                /etc/ld.so.cache
                





        





    











        









