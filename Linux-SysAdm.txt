Linux系统管理
    主要内容：
        磁盘管理、文件管理
        RAID 基础原理	LVM2
        网络管理：TCP/IP协议，Linux网络属性
        程序包管理：RPM，yum
        进程管理：htop，glance，tsar等
        sen和awk
        Linux系统开机流程
        内核管理的基础知识，编译内核，模块
        Linux系统裁减
        Kernel+busybox
        课外作业：LFS
回顾：find，特殊权限，if语句
Linux磁盘管理
    IO Port：I/O设备地址
    一切皆文件，字符设备，块设备
    设备文件：关联至一个设备的驱动程序，进而能够与之对应的设备进行通信
    设备号码：
        主设备号：major number，标识设备的类型
        次设备号：minor number，标识同一类型下的不同设备
    /dev/DEV_FILE
    磁盘的接口类型：
        并口：
        IDE	133MB/S
        SCSI：640MB/S
        串口：
        SATA：6Gpbs
        SAA：6Gpbs
        USB：480MB/S
    磁盘设备文件命名
        IDE：/dev/hd[a-z]
        其它：//dev/sda[a-z]
        不同的设备：a-z，如：/dev/sda，/dev/sdb，……
        同一设备不同分区，1，2，3，……，如：/dev/sda1，/dev/sda2，……
    机械硬盘的工作方式
        track：磁道
        cylinder：柱面
        secto：扇区
        如何分区：按柱面
        MBR：Master Boot Record
        0磁道，0扇区，512bytes
        bootload：446bytes
        分区表：64bytes，每16bytes标识一个分区，最多4个主分区
        标记位：2bytes，5A
        磁盘转速单位：rpm，rotations per minute
        UEFI，GPT？
    分区管理工具：
        fdisk：对于一块硬盘最多管理15个分区
        fdisk -l [-u] [device...]
        # fdisk device
        子命令：
            p 	print 显示已有分区
            n 	new，创建分区
            d 	delete，删除分区
            w	write，写入修改并退出
            q 	quit，放弃修改并退出
            m	获取帮助信息
            l	list，列出分区id
            t	调整分区id
        cat /proc/partitions，查看内核是否忋识别分区
        通知内核重新读取磁盘分区表信息：
            partx
            partx -a /dev/sda
            partx --a -n 4:6 /dev/sda
            kpartx -a /dev/sda
                -f : force
            CentOS 5上使用 partprob
            partprob /dev/sda
Linux文件系统管理
    Linux文件系统：
        ext2, ext3, ext4, XFS, btrfs, reisefs, jfs, swap(交换分区)
    光盘文件系统，iso9660
    Windows fat32, NTFS
    Unix FFS, UFS, JFS2
    网络文件系统 NFS, CIFS
    集群文件系统 GFS2, OCFS2
    分布式文件系统 ceph, moosefs, mogilefs, glusterfs, lustre
    根据其是否支持日志“journal”功能，分为
    日志型：extras，……
    非日志型：extr2
    文件系统的组成部分：
    内核中的模块：ext4，xfs

    用户空间的管理工具：
    mkfs.ext2  mkfs.xfs
    Linux的虚拟文件系统：VFS
    创建文件系统：
    mkfs.FS_TYPE /dev/DEVICE
    FS_TYPE：
        ext4
        xfs
        btrfs
        vfat
    mkfs -t FS_TYPE /dev/DEVICE
        -L “ABELE“	设置卷标
    mke2fs：ext系列文件系统专用工具
        -t {ext2|ext3|ext4}
        -b {1024|2048|4096}	块大小
        -L “ABELE“	设置卷标
        -j 相当于 -t ext3
        mkfs.ext3 = mkfs -t ext3 = mke2fs  -j = mke2fs -t ext3
        -i # 为数据空间每多少个字节创建一个inode，此大小不应该小于块的大小
        -N # 为数据空间创建多少个inode
        -m # 为管理人员预留的空间占据的百分比，默认为5%
        -O FEATURE[, ...] 启用特性
           ^FEATURE 关闭特性
    mke2fs -b 1024 -m 3 -L "MYDATA" /dev/sda4
    mkswap：创建交换分区
    -L “LABEL”
    前提是要将分区的id调整为82
    其它工具：
        blkid：块设备属性信息查看
        blkid [options]  device [device ...]
        -U UUID：根据UUID查找设备
        -L LABEL：显示卷标为LABEL的设备、
        e2label：管理ext系列文件系统的LABEL
        e2label device [ new-label ]  查看或设置卷标
        tune2fs：重新设定ext系列文件系统可调整的参数
        -l  查看超级块信息
        -L  “LABEL” 修改卷标
        -m #  修改预留给管理员的百分比
        -j  将ext2 -> ext3
        -O  文件系统属性启用禁用
        -o  调整挂载选项
        -u  UUID  修改UUID
    dumpe2fs
        -h  查看超级块信息
    文件系统检测
        fsck： File System Check
        fsck.FS_TYPE  或  fsck -t FS_TYPE
    Note：FS_TYPE，一定要与文件系统相同
        -a  自动修改错误
        -r  交互式修复
        e2fsck：ext系列文件系统专用检测工具
        -y  自动回答yes
        -f  强制修复
回顾：
    磁盘接口类型，磁盘分区，fdisk，mkfs，mke2fs，tune2fs，dumpe2fs，e2label，blkid
    vfs：虚拟文件系统
    xfs，ext{2|3|4}，btrfs

文件系统管理
    将额外的文件系统与根文件系统上的目录建立关联关系，进而使该目录作为访问其它文件系统的入口的行为称之挂载
    解除关联有关系的过程称之为卸载
    挂载点：Mount Point
    mount
        把要挂载的设备关联至挂载点
    umount
        卸载时，用设备或挂载点之一即可
    注意：持载点的原有文件，在挂载完成时，会被临时隐藏
    挂载方法：
        mount：只显示当前挂载的设备
        mount [-fnrsvw] [-t vfstype] [-o options] device dir
        device表示要挂载的设备，可用如下方式表示：
            设备文件，如 /dev/sda5
            卷标，-L “LABEL“，如，-L "MYDATA"
            UUID，-u UUID，如，-u “xxxxx-xxxx”
            伪文件系统名称，如proc，sysfs，devtmpfs，configfs
        dir，挂载点
            事先存在，建议为空目录，如，/application/httpdocs
        注意：在使用过程中，设备无法被卸载
        常用选项：
            -t vfstype，指明要挂载的文件系统类型，可省略
            -r readonly，只读挂载
            -w read and write，读写挂载
            -a 自动挂载定义在 /etc/fstab 文件中，且挂载选项中具有“自动挂载”的所有设备
            -n 在挂载该设备时，不更新 /etc/mtab 文件
            -L “LABEL”，以卷标指定要挂载的设备
            -u UUID，以UUID指定要挂载的设备
            -B --bind，又称绑定，挂载目录到另一个目录

        cat /proc/mounts
        查看内核追踪到已挂载的所有设备

        挂载文件系统的选项  -o option
            async   异步模式
            sync    同步模式
            atime/noatime   访问文件时，是否自动更改 accsess time 一般是atime，包含目录文件
            diratime/nodiratime 是否更改目录访问时间戳
            auto/noauto 是否支持自动挂载
            exec/noexec 是否支持文件系统上的应该程序运行为进程
            dev/nodev   是否支持在些文件系统上使用设备文件
            suid/nosuid 是否支持suid
            remount 重新挂载
            ro/rw   只读/读写
            user/nouser 是否允许普通用户挂载此设备，一般不允许
            acl 启用此文件系统的 acl 功能
            注意：上述选项可多个同时使用，用逗号分割
            默认挂载选项：defaults，包括 rw, suid, dev, exec, auto, nouser, async
        
    卸载命令
        umount DEVICE
        umount MOUNT_POINT
        查看正在访问指定文件系统的进程
            fuser -v MOUNT_POINT
        终止所有正在访问指定文件系统上的进程
            fuser -km MOUNT_POINT
        
    挂载交换分区
        启用：swapon
        禁用：swapoff

        swapon [option]...  [DEVICE]
            -a 激活所有交换分区        
            -p PRIORITY，指定优级级，优先级是一个数字
        swapoff：类似swapon
    
    内存空间使用状态
        free [option]
            -m 以MB为单位
            -g 以GB为单位
    文件系统空间占用等信息查看命令
        df
            -h human-readable
            -i instead of blocks
            -p 表示 posix 格式输出，不会分行        
    目录单体空间占用状态查看
        du [option]...  dir
            -h --human-readable
            -s summary
    命令总结：mount umount free df du swapon swapoff fuser

    文件挂载配置文件
        /etc/fstab，每行定义一个要挂载的文件系统
        要挂载的设备或伪文件系统    挂载点     文件系统类型      挂载选项    转储频率    自检次序

        要挂载的设备或伪文件系统，可以是设备文件，LABEL(LABEL="")，UUID(uuid=""),伪文件系统名称(proc, sysfs)
        挂载点
        挂载选项，defaults
        转储频率，0：不做备份，1：每天转储，2：每隔一天转储
        自检次序，0：不自检，1：首先自检，一般只有根文件系统才用1

文件系统上的其它概念
    Inode，Index node，索引结点
    地址指针：
        直接指针，间接指针，三级指针
    inode bitmap：对伴标识每个inode空间与否的状态
    链接文件
        硬链接：
            不能对目录进行
            不能跨分区进行
            指向同一个inode的多个不同路径，创建硬链接，即为inode创建新的引用路径，因此会增其引用次数
        符号链接，也称为软链接
            可以对目录进行
            可以跨分区进行
            指向的是另一个文件的路径，其大小为指向路径字符串的长度，不会增加或减少目标文件inode的引用计数
        ln [sv] SRC DEST
            -s symbolic link
            -v verbose

bash脚本编程之用户交互
    read [option]... [name,..]
        -p "PROMPT"
        -t TIMEOUT(数值) 指明超时时间
    检测bash脚本语法错误
        bash -n /path/to/some_script
    调试执行
        bash -x /path/to/some_script

回顾：
    mount/umount fstab配置文件 ext文件系统的基础原理
    read bash
    /etc/fstab
    ext super, block GDT(组描述表) inode table, block bitmap, dumpe2fs -h, tune2fs -l
    硬链接，软链接

RAID  Redundant Array of Inexpensive Disks，廉价冗余磁盘陈列
      Redundant Array of Independent Disks，独立冗余磁盘陈列
      Berkeley A case for Redundant Array of Inexpensive Disks  RAID

    提高IO能力，磁盘并行读写，加缓存，外部供电
    提高耐用性，通过磁盘冗余完成
    级别：多块磁盘组织在一起的工作方式有所不同
    RAID实现方式
        外接式磁盘阵列，通过扩展卡提供适配能力
        内接式RAID，主板集成RAID控制器
        software RAID
    级别：level
        RAID-0  0，条带卷
        RAID-1  1，镜像卷
        RAID-2  
        RAID-3
        RAID-4
        RAID-5
        RAID-6
        RAID-10
        RAID-01

        RAID-0：
            读写性能提升
            可用空间：N*min(s1,s2,...)
            无容错能力
            最少磁盘数：2，2+
        RAID-1：
            读性能提升，写性能略有下降
            可用空间：1*min(s1,s2,...)
            有冗余能力
            最少磁盘数：2，2+

        RAID-2，RAID-3不常用
        RAID-4: 类似RAID-0，再加一块用来存放校验码的磁盘
        RAID-5：类似RAID-4，但校验码循环存在至每块磁盘上
            读写性能提升
            可用空间：(N-1)*min(s1,s2,...)
            有容错能力：1块磁盘
            最少磁盘数：3，3+
        RAID-6：在RAID-5的基础上，增加一块磁盘用来存储校验码
            读写性能提升
            可用空间：(N-2)*min(s1,s2,...)
            有容错能力：2块磁盘
            最少磁盘数：4，4+
        RAID-10
            读写性能提升
            可用空间：N*min(s1,s2,...)/2
            有容错能力，每组镜像最多能坏一块
            最少磁盘数：4，4+
        RAID-01，RAID-50，RAID-7
        JBOD：Just a Bunch of Disks
            功能：将多块磁盘空间合并成一个在的连续空间
            可用空间：sum(s1,s2,...)
        常用级别：RAID-0, RAID-1, RAID-5, RAID-10, RAID-50, JBOD
        
    实现方式
        硬件实现方式
        软件实现方式
            CentOS 6 上的软件RIAD的实现，结合内核中的 md(multi devices)
            mdadm：模式化的工具
            命令语法格式
                 mdadm [mode] <raiddevice> [options] <component-devices>
                 raiddevice，/dev/md#
                 component-devices，任意块设备
                 支持的RAID级别：LINAR, RAID0, RAID1, RAID4, RAID5, RAID6, RAID10
                 模式：-C 创建 -A 装配 -F 监控 -f -r -a 管理
                 -C，创建模式
                    -n # 使用#个块来创建此RAID
                    -l # 指明要创建的RAID级别
                    -a {yes|no} 是否创建目标RAID设备的设备文件
                    -c CHUNK_SIZE 指明块大小
                    -x # 指明空闲盘的个数
                -D 显示RAID的详细信息
                
                管理模式
                    -f 标记磁盘为损坏
                        例如：mdadm /dev/md# -f /dev/sdc
                    -a 添加磁盘
                    -r 移除磁盘

                    观察md的状态
                        cat /proc/mdstat
                    
                    停止md设备
                        -S --stop
                        md -S /dev/md#
                    彻底删除md设备
                        1. 停止md设备
                            md --stop /dev/md0
                        2. 移除md设备
                            md --remove /dev/md0
                        3. 将相关块设备的超级重写
                            mdadm --zero-superblock /dev/sd{c,d,e,f}

LVM2：Logic Volume Manager Version 2
    dm，device mapper，将一个或多个底层块设备组织成一个逻辑设备的模块，/etc/dm#
    /dev/mapper/VG_NAME-LV_NAME     /dev/VG_NAME/LV_NAME
    /dev/mapper/VolGroup-lv_root    /dev/VolGroup/lv_root

    PV管理工具
        pvs，简要显示pv信息
        pvdisplay，pv详细信息显示
        pvcreate，/dev/DEVICE：创建pv

    VG管理工具
        vgs，简要显示vg信息
        vgdisplay
        vgcreate  [option...]   VolumeGroupName PhysicalDevicePath [PhysicalDevicePath...]
            -s #[bBsSkKmMgGtTpPeE]
        vgextend VolumeGroupName PhysicalDevicePath [PhysicalDevicePath...]
        vgreduce VolumeGroupName [PhysicalVolumePath...]

    LV管理工具
        lvs
        lvdisplay
        lvcreate -L|--size LogicalVolumeSize[b|B|s|S|k|K|m|M|g|G|t|T|p|P|e|E] -n|--name LogicalVolume{Name|Path} VolumeGroup
    扩展逻辑卷
        lvextend  -L|--size [+]LogicalVolumeSize[bBsSkKmMgGtTpPeE]} LogicalVolumePath
        resize2fs /dev/VG_NAME/LV_NAME
    缩减逻辑卷
        umount /dev/VG_NAME/LV_NAME
        e2fsck -f /dev/VG_NAME/LV_NAME
        resize2fs /dev/VG_NAME/LV_NAME #[mMgGtT]
        lvreduce -L [-]#[mMgGtT] /dev/VG_NAME/LV_NAME
        mount
    快照
        lvcreate -L #[mMgGtT] -p r -s -n snapshot_lv_name original_lv_name

文件系统挂载使用
    挂载光盘设备
        光盘设备文件
            IDE：/dev/hdc
            SATA：/dev/sr0
            符号链接文件，/dev/cdrom
            
            mount -r /dev/cdrom /media/cdrom
        dd命令，转换及复制文件
            用法
                dd if=/PATH/FROM/SRC of=/PATH/TO/DEST
                bs=#，block size，复制单元大小(字节)
                count=#，复制的块数量
            磁盘拷贝
                dd if=/dev/sda of=/dev/sdb
            备份MBR
                dd if=/dev/sda of=/tmp/mbr.bak bs=512 count=1
            破坏MBR的bootload
                dd if=/dev/zero of=/dev/sda bs=256 count=1
        两个特殊设备
            /dev/null  数据黑洞
            /dev/zero  吐零机

btrfs文件系统
    技术预览版
    Btrfs(B-tree，Butter-tree，Better-tree)，GPL，2007 oracle
    核心特性
        1. 多卷(物理)支持，可由多个物理卷组成，支持RAID，联机添加，移除和修改
        2. 写时复制更新机制(CoW)，复制、更新及替换指针，而非“就地更新”
        3. 数据及元数据校验码，checksum
        4. 子卷，sub_volume
        5. 快照，支持快照的快照
        6. 支持透明压缩
    文件系统创建
        mkfs.btrfs
            -L "LABEL"
            -d <profile> RAID0, RAID1, RAID5, RAID6, RAID10, Single，数据块组
            -m <profile>  RAID0, RAID1, RAID5, RAID6, RAID10, dup，元数据块组
            -O <feature>
            -O list-all 列出支持所有特性
    属性查看
        btrfs filesystem show
    挂载文件系统
        mount -t btrfs /dev/sdb MOUNT_POINT
    透明压缩机制
        mount -o compress={lz0|zlib} DEVICE MOUNT_POINT
    
    子命令：filesystem, device, balance, subvolume

压缩、解压缩及归档工具
    compress/upcompress,  .z
    gzip/gunzip,  .gz
    bzip2/bunzip2,  .bz2
    xz/unxz,  .xz
    tar  cpio

    1. gzip/gunzip
        gzip [ -acdfhlLnNrtvV19 ] [-S suffix] [--rsyncable] [ name ...  ]
            -d 解压缩，相当于gunzip
            -c 将压缩的结果输出至标准输出，可重定向，不会操作原文件
            -# 指定压缩比，默认压缩比是 6
        zcat，不显式展开的前提下，查看文本文件的内容
    2. bzip2/bunzip2
        bzip2 [ -cdfkqstvzVL123456789 ] [ filenames ...  ]
            -k keep，保留原文件
            -d 解压缩
            -# 压缩比(1-9)，默认为 6
     3. xz/unxz
        xz [option]...  [file]...
            -k keep，保留原文件
            -d 解压缩
            -# 压缩比(0-9)，默认为 6
    4. tar
        tar [OPTION...] [FILE]...
        (1)创建归档
            tar -cf /PATH/TO/SOMEWHERE.tar FILE ...
        (2)查看归档文件中的文件列表
            tar -tf /PATH/TO/SOMEWHERE.tar
        (3)展开归档
            tar -xf /PATH/TO/SOMEWHERE.tar
            tar -xf /PATH/TO/SOMEWHERE.tar -C /PATH/TO/DIR  展开至指定的目标目录
        
        结合压缩工具，归档并压缩
            -j  bzip2       -z  gzip        -J  xz

bash脚本编程
    condition
        bash命令
        用命令的执行状态结果，成功为true，失败为false
        成功或失败的意义，取决于用到的命令
        
    if语句        bash -n     bash -x
        单分支
            if condition; then
                if-true
            fi
        双分支
            if condition; then
                if-true
            else
                if-false
            fi
        多分支
            if condition1; then
                if-true
            elif condition2; then
                if-true
            elif condition3; then
                if-true
            ...
            else
                all-false
            fi
            逐条件进行判断，第一次遇到为“真”条件时，执行其分支，而后结束
    注意：if语句可以嵌套

    循环 for while until
        for循环
        循环体：要执行的代码，可能要执行n遍
        进入条件
        退出条件

        for 变量名 in 列表; do
            循环体
        done

        执行机制：依次将列表中的元素的值赋给“变量名”，每次赋值后即执行一次循环体中的语句，直到列表中的元素耗尽，循环结束
        
        列表的生成方式：
            1. 直接给出字符串列表
            2. 整数列表
                (1) [start..end]
                (2) $(seq [start [step] end])  要使用命令引用
            3. 返回列表的命令
                $(COMMAND)，如，$(ls /var)
            4. glob，文件名通配方式，如，/var/*
            5. 变量引用 
                $@   $*

Linux程序包管理（1）
    API：Application Programming Interface
    POSIX Portable OS
    程序源代码 -> 预处理 -> 编译 -> 汇编 -> 链接
    静态编译
    动态编译  .so

    ABI application Binary Interface    应用程序二进制接口
    Windows与Linux不兼容
        库级别虚拟化
        Linux WINE
        Windows Cywin

    应用级开发   java python php perl ruby
    系统级开发   c c++

    二进制应用程序的组成部分
        二进制可执行文件  库文件  配置文件  帮助文件
    
    程序包管理器
        debian:  deb  dpt
        redhat:  rpm
            rpm  Redhat Package Manager
            RPM is Package Manager
    
    源码包
        name_VERSION.tar.gz
            VERSION
                major.minor.release
    rpm包命名方式
        name_VERSION-release.arch.rpm
            VERSION：major.minor.release，同源码包保持一致
            release.arch，rpm包版本号，release.os.arch
            zlib-1.2.7-13.e17.i686.rpm
            常见的arch
                x86: i386 i486 i586
                x86_64: x64 x86_64 amd64

    拆包，在有些情况下，程序包过大或者功能过多，在制件程序包往往按功能拆分为多个包
        主包  testapp-VERSION-ARCH.rpm
        支包，子包，分包  testapp-devel-VERSION-ARCH.rpm

    包之间存在依赖关系
        yum，rpm包管理器的前端工具
        apt-get，deb包管理器的前端工具
        zypper，suse上的rpm前端管理工具
        dnf，Fedora 22+，rpm包管理器前端管理工具

    查看二进制程序所依赖的库文件
        ldd /PATH/TO/BINARNY_FILE
    管理及查看本机装载的库文件
        ldconfig
            -p 显示本机已经缓存的所有可用库文件的文件名及文件路径的对应关系
            配置文件：
                /etc/ld.so.conf
                /etc/ld.so.conf.d/*.conf
            缓存文件：
                /etc/ld.so.cache

    程序包管理
        功能：将编译好的应用程序的各组成文件打包成一个或多个程序包文件，从而方便快捷地实现程序包的安装，卸载，查询，升级和校验等管理操作
            1. 程序的组成清单(每个包独有)
                文件清单
                安装或卸载时运行的脚本
            2.数据库(公共)
                程序包名称及版本
                依赖关系
                功能说明
                安装生成的各文件的路径以及校验码信息
        
        管理程序包的方式
            使用包管理器，rpm
            使用前端工具，yum，dnf

        获取程序包的途径
            1. 系统发行版的光盘或官方服务器
                CentOS镜像站点
                http://mirrors.aliyun.com
                http://mirrors.163.com
                http://mirrors.sohu.com
            2.项目官方站点
            3. 第三方组织
                Fedora的EPEL源
                搜索引擎
                    http://pkgs.org
                    http://rpmfind.net
                    htpp://rpm.phone.net
            4. 自己制作

            建议：检查程序包的合法性
                来源合法性
                程序包的完整性

    CentOS系统上rpm命令管理程序包
        安装、卸载、升级、查询、校验、数据库维护
        安装
            rpm {-i|--install} [install-options] PACKAGE_FILE ...
            -v verbose
            -vv
            -h 以 # 显示程序包管理执行进度，每个 # 表示 2% 进度

            rpm -ivh PACKAGE_FILE ...
                [install-options]
                --test 测试安装，但不真正执行安装，dry run
                --nodeps  忽略依赖关系
                --replacepkgs  重新安装
                --nosignature  不检查来源合法性
                --nodigest  不检查包完整性
                --noscript  不执行程序包脚本
                    %pre 安装前脚本      --nopre
                    %post  安装后脚本    --nopost
                    %preun 卸载前脚本    --nopreun
                    %postun  卸载后脚本  --nopostun

        升级
            rpm {-U|--upgrade} [install-options] PACKAGE_FILE ...
            rpm {-F|--freshen} [install-options] PACKAGE_FILE ...
            upgrade，升级时有旧版程序包，则“升级”，否则，则“安装”
            freshen，升级时有旧版程序包，则“升级”，否则，不进行任务操作
            rpm -Uvh PACKAGE_FILE ...
            rpm -Fvh PACKAGE_FILE ...
            大多数的inbstall-options都能使用
            --oldpackage  降级
            --force  强行升级
            注意：
                1. 不要对内核做升级操作，Linux支持多内核并存，因此，直接安装新版内核
                2. 如果原程序包的配置文件安装生曾被修改，升级时新版的配置文件不会直接覆盖老版的配置文件，而把新版的文件重命名(filename.rpmnew)后保留
        
        查询
             rpm {-q|--query} [select-options] [query-options]
             select-option
                -a 所有已安装的包  rpm -qa | grep "php"
                -p /PATH/TO/PACKAGE_FILE  针对未安装程序包作查询操作
                -f 查指定的文件由哪个程序包生成
                    rpm -qf bash
                --whatprovides CAPABILITY  查询指定CAPABILITY由哪个包提供
                --whaterequires CAPABILITY  查询指定CAPABILITY被哪个包依赖
            query-options
                --changelog   显示rpm包的changelog，不是程序本身的changelog
                rpm -q --changelog zsh
                -c 查询程序配置文件
                --conflicts
                -d 查询程序的文件
                -i --info  information，程序包的相关信息
                -l 列出程序包安装之后生成的所有文件(非常有用)   
                --script  显示指定程序包安装卸载时可能会执行的脚本
                --triggers  显示指定程序包安装卸载时可能会执行的触发器脚本
                -R  查询指定的程序包所依赖的CAPABILITY
                --provodes  列出指定程序包提供的CAPABILITY
            用法
                -qi PACKAGE
                -qf FILE
                -qc PACKAGE
                -ql PACKAGE
                -qd PACKAGE
                -qpi PACKAGE_FILE
                -qpl PACKAGE_FILE
                -qa

        卸载
            rpm {-e|--erase} [--allmatches] [--nodeps] [--noscripts]

        校验
            rpm {-V|--verify} [select-options] [verify-options]
                S file Size differs
                M Mode differs (includes permissions and file type)
                5 digest (formerly MD5 sum) differs
                D Device major/minor number mismatch
                L readLink(2) path mismatch
                U User ownership differs
                G Group ownership differs
                T mTime differs
                P caPabilities differ

        包来源合法性及完整性验证
            完整性验证
            公钥加密
                对称加密，加密解密使用同一密码
                非对称加密
                    public key  公钥，公开，所有人都能获取到
                    secret key  私钥，不能公开
            导入公钥
                rpm --import /PATH/FORM/GPG_PUBKEY_FILE
                发行版7密钥文件 RPM-GPG-KEY-CENTOS-7
        
        数据库重建
            rpm {--initdb|--rebuilddb}
                --initdb  初始化
                如果不存在，则创建，否则不做任何操作
                --rebuilddb 重建
                不论当前存在与否，直接重新创建数据库

Linux程序包管理（2）
    CentOS  yum dnf
    YUM yellow dog Yellow Update Modifier
    yum repository(yum repo)  yum仓库
        存储了众多rpm包，以及包相关的元数据文件(放置特定目录下：repodata)
        文件服务器：ftp:// http:// nfs:// file://
    
    yum客户端
        公共配置文件：
            /etc/yum.conf
        仓库配置文件：
            /etc/yum.repo.d/*.repo

        仓库定义：
            [repositoryid]
            name=some name for this repository
            baseurl=url://path/to/repository
            enabled={1|0}
            gpgcheck=={1|0}
            gpgkey=url
            enablegroup={1|0}
            failovermethod={roundrobin|priority}   默认是roundrobi，随机
            cost=1000   默认1000，越小优先级越高

    yum命令用法
        显示仓库列表
            repolist [enabled | disableed | all]
        显示程序包
            list
            yum list phh*
            yum list {available | installed | updates} [glob_exp1] [...]

        安装程序包
            install PACKAGE1 [PACKAGE2] ...
        
        升级程序包
            update PACKAGE1 [PACKAGE2] ...

        检查可用升级
            chech-update
        
        卸载程序包
            remove | erase PACKAGE1 [PACKAGE2] ...

        查看程序包information
            info [...]
        
        查看指定的特性（某文件）是由哪个程序包提供
            provides  类似 rpm -qf
        
        清理本地缓存
            clean [packages | metadata | all]
        
        构建缓存
            makecache
        
        搜索
            search string1 [string2] ...
            搜索程序包名及summary中确定的关键字

        重新安装
            reinstall
        
        降级
            downgrade

        显示程序包依赖关系的 capability
            deplist PACKAGE1 [PACKAGE2] ...

        查看yum事务历史
            history [info | list | stats]
        
        安装及升级本地程序包
            localinstll localupdate 现已不建设使用，用 install update 代替
        
        包组管理命令
            groupinstall
            groupupdate     
            grouplist
            groupremove
            groupinfo  

    如何使用光盘当本地仓库
        1. 挂载光盘至某目录，例如，/media/cdrom
            mount -r -t iso9660 /dev/cdrom /media/cdrom
        2. 创建配置文件
            [CentOS7-cdrom] 
            name=
            baseurl=file:///mnt/cdrom
            gpgchcke=0
            enabled=1

    yum命令行选项
        --nogpgcheck  禁止进行gpgcheck
        -y  自动回答yes
        -q  静默模式
        --disablerepo=repoidglob  临时禁用此处指定的repo，可使用glob方式指定
        --enablerepo=repoidglob  临时启用此处指定的repo
        --noplugin  禁用所有插件

    yum仓库配置文件中可用变量
        $releasever  当前OS发行版的主版本号
        $arch  平台
        $basearch  基础平台
        $yum0-$yum9
        如，http://mirrors.lsu.edu.cn/centos/$releasever/$basharch/os

    创建yum仓库
        createrepo [option] <dir>

    程序包编译安装
        test_VERSION-release.src.rpm，安装后，使用rpmbuild命令制作成二进制格式的rpm包，而后再安装
        源代码组织格式
            多文件，文件中的代码之间，很可能存在跨文件依赖关系
            c c++  make  configure -> makefile.in -> makefile
            java   maven
        
        编译安装三步骤
            ./configure通过选项，传递参数，指定启用特性、安装路径
            make，根据makefile文件，构建应用程序
            make install
            执行时会参考用户的指定以及makefile.in文件生成makefile
            检查各依赖到的外部环境
            开发工具
                autoconf，生成configure脚本
                automake，生成makefile.in文件
            建议：安装前查看INSTALL, REDAME文件
        开源程序源代码获取
            官方自建站点
            代码托管
                SourceForge
                github.com

        编译C源代码
            前提：提供开发工具及开发环境
                开发工具，gcc make等
                开发环境，开发库，头文件
                通过“包组”提供开发组件
                    CentOS 6：“Development tools”  “Server Platform Development”
            
            第一步：configure脚本
                选项：安装位置，启用特性
                --help，获取其支持的选项
                选项分类
                    安装路径设定
                        --prefix=/PATH/TO/SOMEWHERE  默认安装目录
                        --sysconfdir=/PATH/TO/SOMEWHERE  配置文件安装目录
                    system types
                    Optional Feature：可选特性
                        --disable-FEATURE
                        --enabl-FEATURE[=ARG]
                    Optoinal Packages：可选包
                        --with-PACKAGE[=ARG]
                        --without--PACKAGE
            第二步：make
            第三步：make install

            安装之后的配置
                1. 导出二进制程序目录至PATH环境变量中
                    编辑文件 /etc/profile.d/NAME.sh
                        export PATH=/PATH/TO/BIN:$PATH
                2. 导出库文件路径
                    编辑文件 /etc/ld.so.conf.d/NAME.conf
                    添加新的库文件所在目录至此文件
                    让系统重新生成缓存  ldconfig [-v]
                3. 导出头文件，基于符号链接方式
                    ln -sv
                4. 导出帮助手册
                    编辑 /etc/man.config
                    添加一个MPATH

Linux网络属性配置（1）
    局域网：以太网，令牌环网
    Ethernet，CSMA/CD 载波侦听多路访问冲突检测
        冲突域
        广播域
        MAC  Media Access Control
        48bits  前24bits，厂商，后24bits，序列号

    Routing Protocol，路由协议，RIP
    Routed Protocol，被路由协议
    传输层协议
        tcp upd stcp 
    网络层协议
        ip
    
    IPV4地址分类
        点分十进制  0.0.0.0 - 255.255.255.255
        A类
            0 000 0000 - 0 111 1111     1-127
            网络数，127个
            每个网络中的主机数 2^24-2台，全0，全1 有特殊作用
            默认子网掩码  255.0.0.0
            私网地址  10.0.0.0/8

         B类
            10 00 0000 - 10 11 1111     128-191
            网络数，2^14个
            每个网络中的主机数 2^16-2台，全0，全1 有特殊作用
            默认子网掩码  255.255.0.0
            私网地址  176.16.0.0/16 - 172.31.0.0/16

        C类
            110 0 0000 - 110 1 1111     192-223
            网络数，2^21个
            每个网络中的主机数 2^8-2台，即254台，全0，全1 有特殊作用
            默认子网掩码  255.255.0.0
            私网地址  192.168.0.0/24 - 192.168.255.0/24
        
        D类 组播地址
            1110 0000 - 1110 1111       224-239
        
        E类 
            240 - 255

    跨网络通信：路由
        主机路由，路由目标是单台主机
        网络路由
        默认路由
    
    将主机接入到网络中
        IP/mask
        路由，即网关
        DNS服务器
            主DNS服务器
            次DNS服务器
            第三DNS服务器
        
    配置方式
        表态指定
            ifcfg：ifconfig，route，netstat
            ip {link ｜ addr ｜ route}，ss，tc
            配置文件
                system-config-network-tui
                setup
        动态分配
            DHCP Dynamic Host Configuration Protoco

    配置网络接口
        接口命名方式
            CentOS 6
                以太网：eth0，eth1，……
                PPP：ppp[0, 1, 2, ...]
        
        ifconfig命令
            ifconfig [interface]
            ifconfig interface [aftype] options | address ...

            ifconfig -a
            ifconfig IFACE [up | down]
            ifconfig IFACE IP/mask [up]
            ifconfig IFACE ip netmask MASK

         注意:立即生效
         启用混杂模式 [-]promisc
        
        route命令
            路由管理命令
                查看：route -n

                添加路由  route add
                route add [-net | -host ] target [netmask NM] [gw GW] [[dev] If]
               
                目标主机：192.168.1.3，网关：172.16.0.1
                    route add -host 192.168.1.3 gw 172.16.0.1 dev eth0

                目标：192.168.0.0，网关：172.16.0.1
                    route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0
                    route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0

                默认路由，网关 172.16.0.1
                    route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1
                    route add default gw 172.16.0.1

                删除 route del
                route  del [-net|-host] target [gw Gw] [netmask Nm] [[dev] If]

                route del -host 192.168.1.3
                route del -net 192.168.0.0/24
                route del -net 192.168.0.0 netmask 255.255.255.0

    DNS服务器指定
        /etc/resolv.con
            nameserver DNS_SERVER_IP1
            nameserver DNS_SERVER_IP2
            nameserver DNS_SERVER_IP3
        正解：FQDN -> IP
            dig -t A FQDN
            host -t A FQDN
        反解：IP -> FQDN
            dig -x ip
            host -t PTR ip

    netstat命令  网络状态查看
        显示网络连接
            -t  TCP协议相关
            -u  UDP协议相关
            -w  裸套接字
            -l  处于监听状态
            -a  所有状态
            -n  以数字格式显示IP和端口
            -e  扩展格式
            -p  显示相关的进程和PID号
        显示路由表
            netstat  {--route|-r} [--numeric|-n]
                -r 内核路由表
                -n 数字格式
        接口统计数据
            netstat -i   所有接口
            netstat -Ieth0   选项 -I 和 设备名之间不能有空格

Linux网络属性配置（2）
    配置Linux网络属性：ip 命令
        ip [ OPTIONS ] OBJECT { COMMAND | help }
        OBJECT = {link | addr | route}

        link OBJECT 网络设备配置命令
        
        ip link
            show 
                [dev IFACE]  指定接口
                [up]   仅显示处于激活状态的接口
            set 
                dev IFACE
                可设置属性
                    up or down
                    promisc {on | off}    
                    arp {on | off}
                    ....

        ip addr
            ip addr {add | del} IFADDR dev String
                [label LABEL]   指明网卡别名
                [scope {globl | link | host}]  指明作用域
                    global：全局可用
                    link：仅链接可用
                    host：本机可用
                [broadcast ADDRESS]  广播地址

            ip addr show
                [dev DEVICE]
                [label PATTERN]
                [primary and secondary]

            ip addr flush
                使用格式同 show 命令

        ip route
            ip route add
            ip route add 192.168.1.3 via 172.16.0.1 dev eth0
            ip route add 192.168.0.0/24 via 172.16.0.1 dev eth0
            
            添加路由方式
                ip route add TARGET via GW dev IFACE src SOURCE_IP
                TARGET:
                    主机路由：IP
                    网络路由：NETWORK/MASK

            ip route show
            ip route flush
                [dev IFACE]
                [via PREFIX]

    ss命令
        格式：ss [options] [ FILTER ]
            选项
            -t  TCP协议相关
            -u  UPD协议相关
            -w  裸套接字
            -x  unix sock 相关
            -l  LISTEN 状态连接
            -a  所有
            -n  数字格式
            -p  相关进程及PID
            -e  扩展信息
            -m  内存用量
            -o  计时器信息

            FILTER := [ state TCP-STATE ] [ EXPRESSION ]
            TCP的常见状态
                tcp finite state machine
                LISTEN  监听
                ESTABLISHED  已建立的连接
                FIN_WAIT_1
                FIN_WAIT_2
                SYN_SENT
                SYN_RECV
                CLOSED

            EXPRESSION
                dport
                sport
                示例：'(dport=:ssh or sport=:ssh)'，也可以是 '(dport=:22 or sport=:22)'
        常用组合
            -tan  -tanl  -tanlp  -uan

Linux网络属性配置（3）
    修改配置文件

    ip，mask，gateway，DNS 相关配置
        /etc/sysconfig/network-scripts/ifcfg-IFACE
            DEVICE          此配置文件应用到的设置
            HWARDDR         对应设备的MAC地址
            BOOTPROTO       激活此设备时使用的地址配置协议，常用的有 dhcp，static，none，bootp
            NM_CONTROLLED   NM 是 NetworkManager 的简写，表明是否接受 NM 控制，CentOS 6系统建议为 “no“
            ONBOOT          在系统引导时，是否激活设备
            TYPE            接口类型，常见有 Ethernet  Bridge
            UUID            设备唯一标识
            IPADDR          指明IP地址
            NETMASK         指明子网掩码
            GATEWAY         指明网关
            DNS1            第一个DNS服务器指向
            DNS2            第二个DNS服务器指向
            USERCTL         是否允许普通用户控制此设备
            PEERDNS         如果BOOTPROTO的值为 "dhcp"，是否允许由DHCP Server分配的 dns 服务器指向信息直接覆盖 /etc/resolv.conf 文件
    路由相关配置文件，默认是不存在的，如果需要，用户要自行创建
        /etc/sysconfig/network-scripts/route-IFACE
        两种风格，在配置文件中，选择其一，不能混用
            1. TARGET via GW
            2. 每三行定义一条路由
                ADDRESS#=TARGET
                NETMASK#=mask
                GATEWAY#=GW

    给网卡配置多地址
        ifconfig
        ip
        配置文件
            ifcfg-IFACE-ALIAS
                DEVICE=ifcfg-IFACE-ALIAS

        ifconfig IFACE-ALIAS

        注意：别名的IP地址不能通过DHCP分配
    
    Linux网络属性配置的tui（text user inferface）
        system-config-network-tui，也可能通过 setup 命令找到
        通过tui配置，需要重启服务才能生效

    配置当前主机的主机名
        hostname [HOSTNAME]
        /etc/sysconfig/network
            HOSTNAME=

    网络接口识别并命名的相关udev配置文件
        /etc/udev/rules.d/70-persisten-net.rules
        
        卸载网卡驱动
            modprob -r e1000
        装载网卡驱动
            modprob e1000

    CentOS 7网络配置属性
        传统命名：以太网  eth[0, 1, 2, 3,...]，wlan[0, 1, 2, 3,...]
        可预测功能
            udev支持多种不同的命名方案，如FirmWare，拓扑结构
        网卡命名机制
            systemd对网络设备的命名方式
            1. 如果FirmWare或BIOS为主板上集成的设备提供的索引信息可用，且可预测，则根据此索引进行命名，例如，en01
            2. 如果FirmWare或BIOS为PCI-E扩展槽提供的索引信息可用，且可预测，则根据此索引进行命名，例如，ens1
            3. 如果硬件接口物理位置信息可用，则根据此信息进行命名，例如，enp2s0
            4. 如果用户显示启动，也可根据MAC地址进行命名，例如，enx2387a1dc56
            5. 上述均不可用，则使用传统命名机制

        名称组成格式
            en：ethernet
            wl：wlan
            ww：wwan
        名称类型
            o<index>：集成设备的设备索引号（板上设备）
            s<slot>：扩展槽的索引号
            x<MAC>：基于MAC地址的命名
            p<bus><slot>：enp2s1

        网卡设备的命名过程
            第一步：
                udev，辅助工具/lib/udev/rename_device       /usr/lib/udev/rules.d/60-net.rules
            第二步：
                biosdevname会根据/usr/lib/udev/rules.d/71-biosdevname.rules
            第三步:
                通过检测网络接口设备,根据/usr/lib/rules.d/75-net-description
                ID_NET_NAME_ONBOARD  ID_NET_NAME_SLOT  ID_NET_NAME_PATH

        回归传统命名方式
            1. 编辑/etc/default/grub配置文件
            GRUB_CMDLINE_LINUX="net.ifnames=0 crashkernel=auto rd.lvm.lv=cl/root rd.lvm.lv=cl/swap rhgb quiet"
            在原来的基础上，加上 net.ifnames=0
            2. 生成配置文件供grub2使用
            grup2-mkconfig -o /boot/grub/grub.cfg 或 grup2-mkconfig -o /etc/grub2.cfg，后者是前者的一个链接文件
            3.重启系统

        地址配置工具，nmcli
            nmcli [OPTIONS...] OBJECT [COMMAND] [ARGUMENTS...]
            OBJECT={help | general | networking | radio | connection | device | agent | monitor}
            device {status | show | set | connect | reapply | modify | disconnect | delete | monitor | wifi | lldp} [ARGUMENTS...]
            connection {show | up | down | modify | add | edit | clone | delete | monitor | reload | load | import | export} [ARGUMENTS...]

            如何修改IP地址
                nmcli connection modify IFACE [+|-] setting.property value
                    setting.property
                        ipv4.addresses
                        ipv4.gateway
                        ipv4.dns
                        ipv4.method   manual dhcp等

        网络接口配置tui工具，nmtui
        主机名称配置工具 hostnamectl

        网络客户端工具
            lftp ftp lftpget wget 

                lftp [-u user [,password]] [-p prot] SERVER
            子命令 mget get ls help

            wget
                wget [option]... [URL]...
                -q 静默模式
                -c 续传
                -O 保存位置
                --limit-rates 指定传输速率

Linux进程及作业管理
    内核的功用：进程管理，文件系统，网络功能，内存管理，驱动程序，安全功能
    process：运行中的程序的一个副本
    task struct，Linux内存存储进程信息的结构
    task list，多个任务task struct组成的链表

    进程创建
        init
            父子关系
            进程都是由其父进程创建 fork() clone()
            进程优先级：0-139
            实时优先级：1-99，数字越大，优先级越高
            静态优先级：100-139，数字越小，优先级越高
            nice值：-20-19，正好对应 100-139

        进程内存
            分页存储
            MMU Memory Managmetn Unit

        IPC，Inter Process Communication，进程间通信
            同一主机
                singal
                shm   shared memory
                semerphor
            不同主机
                rpc remote procudure call
                socket
    进程类型
        守护进程，daemon，在系统引导进程过程中启动的进程与终端无关
        前台进程（用户进程），通过终端启动的进程
        注意：也可反前台启动的进程送往后台，以守护模式运行

    进程状态
        运行态，running
        就绪态，ready
        睡眠态
            可中断，interruptible
            不可中断，uninterrutiable
        停止态，stopped，暂停于内存中，但不会被调度，除非手动启动
        僵死态，zombie
    
    进程分类
        CPU-Bound
        IO-Bound

    Linux进程查看管理工具
        pstree ps pidof pgrep top htop glance pmap vmstat dstat kill pkill job bg fg nohup

        pstree命令，直接使用

        ps命令，process state
        ps - report a snapshot of the current processes.
        Linux系统上各进程的相关信息都保存在 /proc/PID 目录下的各个文件中

        ps [options]
            选项，支持两种风格

            常用组合：aux    BSD风格
                u  以用户有中心，组织进程状态信息显示
                a  与终端相关进程
                x  与终端无关进程

                USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND

                VSZ  Virtual memory SiZe，虚拟内存集
                RSS  Resident Size，常驻内存集
                STAT  进程状态
                    R  running
                    S  interruptible sleeping
                    D  uninterruptible sleeping
                    T  stopped
                    Z  zombie
                    +  前台进程
                    l  多线程进程（是小写字母l）
                    N  低优先级进程
                    <  高优先级进程
                    s  Session leader（小写s）

            常用组合：-ef
                -e  显示所有进程，相当于 ax
                -f  显示完整格式的程序信息

            常用组合：-eFH
                以进程层级格式显示进程信息
                -F  显示完整格式的进程信息
                -H  以层级格式显示进程信息

            常用组合：-eo    axo
                AIX FORMAT DESCRIPTORS

                    CODE   NORMAL   HEADER
                    %C     pcpu     %CPU
                    %G     group    GROUP
                    %P     ppid     PPID
                    %U     user     USER
                    %a     args     COMMAND
                    %c     comm     COMMAND
                    %g     rgroup   RGROUP
                    %n     nice     NI
                    %p     pid      PID
                    %r     pgid     PGID
                    %t     etime    ELAPSED
                    %u     ruser    RUSER
                    %x     time     TIME
                    %y     tty      TTY
                    %z     vsz      VSZ

                例如：ps -eo "%p %y %x %c"  或  ps axo "%p %y %x %c"

                STANDARD FORMAT SPECIFIERS

                    CODE        HEADER    
                    %cpu        %CPU
                    %mem        %MEM
                    args        COMMAND
                    blocked     BLOCKED
                    bsdstart    START
                    bsdtime     TIME   
                    caught      CAUGHT
                    cgroup      CGROUP    
                    cls         CLS
                    cmd         CMD  
                    comm        COMMAND
                    command     COMMAND
                    cp          CP
                    cputime     TIME
                    drs         DRS
                    egid        EGID  
                    egroup      EGROUP
                    eip         EIP    
                    esp         ESP
                    etime       ELAPSED  
                    euid        EUID
                    euser       EUSER                         

                例如：ps -eo pid,user,args --sort user

        pgrep，pkill
            pgrep [options] pattern
            pkill [options] pattern
                -u uid  effectived user
                -U uid  real user
                -t terminal  与终端相关进程
                -l  显示进程名
                -a  显示完整格式的进程名(在CentOS 6中没有该选项)
                -P pid  显示其父进程为此处指定进程的子进程列表(大写P)
                
        pidof命令
            根据进程名获取pid

        top命令
            有多个内建命令
                排序：
                    P  CPU百分比
                    M  内存百分比
                    T  累积CPU时长
            
                首部信息显示(uptime)：l 命令(小写字母l)
                task及cpu信息：t 命令
                    cpu分别显示：1 命令(数字)
                内存部分显示：m 命令(小写m)
                退出命令：q
                修改刷新时间间隔：s 命令
                终止指定进程：k命令

            选项
                -d #  指明刷新时间间隔，默认为 3 秒
                -b    以批次方式
                -n #  显示多少批次
        
        htop命令
            s   跟踪选定进程的系统调用
            l   显示选定进程打开的文件列表
            a   将选定的进程绑定至指定的CPU核心
            t   显示进程树

        vmstat命令
            vmstat [options]  [delay [ count]]
            procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu-----
            r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
            
            procs
                r  等待运行的进程队列
                b  处于不可中断睡眠态的进程个数，被阻塞的队列长度
            
            memory
                swpd  交换内存的使用总量
                free  空闲物理内存总量
                buff  用于buff的内存总量
                cache 用于cache的内存总量

            swap
                si  数据进入swap中的数据速率(Kb/s)
                so  数据离开swap的数据速率(Kb/s)

            io
                bi  以块设备读入数据到系统的速度(Kb/s)
                bo  保存数据到块设备的速率
            cpu
                us  用户空间进程占比
                sy  内核系统调用占比
                id  空闲时间占比
                wa  等待io时间占比
                st  被偷走的cpu时间占比

            选项
                -s  显示内存的统计数据
            
        pmap
            pmap - report memory map of a process
            pmap [ -x | -d ] [ -q ] pids...

            -x  显示详细格式的信息

            另一种实现
                cat /proc/PID/maps

        glances命令
            glances  [-bdehmnrsvyz1]  [-B bind] [-c server]  [-p port] [-P password] [--password] [-t refresh] [-f file] [-o output]
            
            常用选项
                -b  以Byte为单位显示网卡数据速率
                -d  关闭磁盘I/O模块
                -f  /path/to/somefile  设置输出文件位置，即将命令显示结果保存到文件中
                -o  {HTML | CSV}  输出文件格式
                -m  禁止mount模块
                -n  禁用网络模块
                -t #  延迟时间间隔
                -1  每个cpu的相关数据单独显示(数字 1 )
            
            C/S模式下运行glances命令
                服务吕模式
                    glances -s -B IPADDR   服务器自己的地址
                
                客户端模式
                    glances -c IPADDR  要连入服务器端的地址

        dstat命令
            dstat [-afv] [options..] [delay [count]]
            -c  显示cpu相关信息
            -d  显示磁盘读写速率
            -g  显示页面相关统计数据
            -m  显示memory相关统计数据
            -n  显示netword相关统计数据
            -p  显示process相关统计数据
            -r  显示IO请求相关统计数据
            -s  显示swap相关统计数据
            --top-cpu  显示当前最占用cpu的进程
            --top-io   显示当前最占用IO的进程
            --top-men  显示当前最占用内存的进程
            --toplatency  显示当前延迟最大的进程

        kill命令
            向进程发送控制信号，以实现对进程管理
            显示当前系统的可用信号
                kill -l
                man 7 signal
            
            常用信号
                1  SIGHUP   无须关闭进程，让进程重读配置文件
                2  SIGINT   中止正在运行的进程，相当于 ctrl + c
                9  SIGKILL  杀死运行的进程
                15 SIGTERM  终止运行的进程
                18 SIGCONT
                19 SIGSTOP

            使用信号的方法
                1. 使用信号的数字标识 1 2 9
                2. 信号完整名称 SIGHUP
                3. 信号简写名称 HUP

            向进程发信号
                kill [-SIGNAL]  PID...
            
            终止”名称“之下的所有进程
                killall -[SIGNAL]  进程名
                
Linux任务计划，周期性任务
    未来的某时间点执行一次任务，at  batch
    周期性运行某任务  cron
    邮件服务
        SMTP Simple Mail Transmission Protocol
        POP3 Post Office Protocol
        IMAP4  Internet Mail Access Protocol

        mailx [-s SUBJECT] username[@hostname]
        邮件正文的生成
            1. 直接给出，用ctrl + d 结束
            2. 输入重定向
            3. 通过管道

        at命令
            at [option] TIME
                TIME
                    HH:MM [yyyy-mm-dd]
                    noon midnight teatime
                    tomorrow
                    now + #{minutes|hours|days|weeks}
                常用选项
                    -l 列出指定队列中等待运行的作业，相当于atq
                    -q QUEUE 队列名为 a，b，c，……
                    -d 删除指定作业，根目录于atrm
                    -c 查询特定作业的详细情况
                    -f /path/form/somefile  从指定的文件中读取任务
                注意：作业任务执行结果以邮件通知给相关用户
        batch命令
            让系统自行选定空闲时间去执行此处指定的任务
    周期性任务计划 cron
        相关任务包
            cronie  主程序包，提供了crond守护进程及相关辅助工具
            cronie-anacron  cronie补充程序，用于监控cronie任务执行状况，如croie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务
            crontabs 包含CentOS提供系统维护任务
        注意：要确保crond守护进程处于运行状态
            CentOS 7  systemctl status crond
            CentOS 6  service crond status

        计划要周期性执行的任务提交给crond，由其来实现到点运行
            系统cron任务
                系统维护作业

                /etc/crontab
                    # For details see man 4 crontabs

                    # Example of job definition:
                    # .---------------- minute (0 - 59)
                    # |  .------------- hour (0 - 23)
                    # |  |  .---------- day of month (1 - 31)
                    # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
                    # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
                    # |  |  |  |  |
                    # *  *  *  *  * user-name  command to be executed

            用户cron任务
                crontab命令
            例如，晚上9点10分运行echo命令
                10 21 * * * gentoo /bin/echo 'Howday'

            时间表示法
                1. 特定值
                    给定时间点的有效取值范围内的值
                2. *
                    给定时间点有效取值范围内的所有值
                    表示“每一……”
                3. 离散取值  ,
                    #, #, #
                4. 连续取值
                    #-#
                5. 在指定时间范围上，定义步长
                    /#  #为步长
                    */3
            例如，每3小时echo命令
                0 */3 * * * gentoo /bin/echo 'Howday'

            用户cron
                通过crontab命令定义，每个用户都有一个专用的cron任务文件
                    /var/spool/cron/USERNAME
                
                crontab命令用法
                     crontab [-u user] [-l | -r | -e] [-i]
                     -l  列出所有任务
                     -e  编辑任务
                     -r  移除所有任务
                     -i  同 -r 一起使用，有选择的移除指定任务
                     -u user  仅root用户可运行，代为指定用户管理cron任务

                注意：运行结果通过邮件通知用户，如果不想收到邮件
                    1. COMMAND > /dev/null
                    2. COMMAND &> /dev/null

            对于cron任务来讲，% 有特殊作用，如果在命令中要使用 % 则需要转义，不过，如果把 % 放置于单引号中，也可以不转义

            思考：
                1. 如何在秒级别运行任务
                    * * * * * for min in 0,1,2;do echo 'hi';sleep 10; done
                2. 如何实现第7分钟运行一次任务

            sleep命令
                sleep number[SUFFIX]
                    s 秒 默认，可省略
                    m 分
                    h 小时
                    d 天

        练习
            1. 每4小时备份一次 /etc 目录至 /back 目录中，保存文件的格式为“etc-yyyy-mm-dd-HH.tar.xz”
                0 */4 * * * tar -cvJf /backup/etc-$(date "+%F-%H").tar.xz /etc
            2. 每周 2，4，7 备份 /var/log/messages 文件到 /log 目录中，文件名形如“messages-yyyymmddd”
                0 0 * * 2,4,7 cp /var/log/messages /backup/messages-$(date "+%Y%m%d")
            3. 每两小时取出当前系统 /proc/meminfo 文件中以 S 或 s 开头的信息，追加到 /tmp/meminfo.txt
                0 */2 * * * grep "^[Ss].*" /proc/meminfo >> /tmp/meminfo.txt
            4. 工作日内，每两小时执行一次“ip addr show”命令
                0 */2 * * 1-5 ip addr show

CentOS 5 和 CentOS 6 的启动流动
    Linux  kernel + rootfs
        kernel：进程管理，内存管理，网络功能，安全功能，驱动程序，文件系统
        内核设计流派
            单内核设计 Linux
                把所有功能集成于同一个程序
            微内核设计 Windows  Solaris
                每种功能使用一个独立子系统实现
        
        Linux内核特点
            支持模块化  .ko，kernel object
            支持模块动态装载和卸载

        组成部分
            核心文件
                /boot/vmlinuz-VERSION-release
                ramdisk
                    CentOS 5  /boot/initrd-VERSION-release.img
                    CentOS 6  /boot/iniramfs-VERSION-release.img
            模块文件
                /lib/modules/VERSION-release/*
            
    CentOS系统启动流程
        POST 加电自检  Power On and Self Testing
            ROM，CMOS，BIOS
        
        Boot Sequence
            按次序查找各引导设备，第一个有引导程序的设备即为本次启动设备

        bootloader  引导加载器程序
            功能：提供一个菜单，允许用户选择要启动的系统或不同的内核版本，把用户选定的内核加载到内存的特定空间中，解压、展开，并把系统控制权移交给内核

            Windows  ntloader
            Linux
                LILO  LInux LOader
                GRUB  Grand Uniform Bootloader
                    GRUB 0.x  GRUB Legacy
                    GRUB 1.x  GRUB2
                    
            MBR
                446：bootloader
                64：fat，文件分区表
                2：55AA

    GRUB
        bootloader 1st stage
        1.5 stage
        disk  2nd stage

    kernel
        自身初始化
            检测可识别到的所有硬件设备
            加载硬件驱动程序(可能会借助于ramdisk加载驱动)
            以只读方式挂载根文件系统
            运行用户空间的第一个应用程序 /sbin/init

        init程序类型
            sysV  init  CentOS 5 
            配置文件 /etc/inittab

            upstart  init  CentOS 6 
            配置文件 /etc/inittab   /ect/init/*.conf

            systemd  systemd  CentOS 7
            配置文件 /usr/lib/systemd/system  /etc/systemd/system

        ramdisk
            内核的特性之一，使用缓冲和缓存画加速对磁盘上文件的访问
            ramdisk -> ramfs
            CentOS 5 initrd  工具程序  mkinitrd
            CentOS 6 initramfs  工具程序  mkinitrd  dracut

    系统初始化
        POST -> BootSequence -> bootloader(MBR) -> kernel(ramdisk) -> rootfs(只读) -> init

    /sbin/init
        CentOS 5
        运行级别：为了系统的运行或维护等应用目的设定
            0-6，7个级别
            0: 关机
            1: 单用户模式，single(root)，维护模式
            2: 多用户模式，会启动网络功能，不会启用NFS
            3: 多用户模式，正常模式，文本界面
            4: 预留级别，可同 3 级别
            5: 多用户模式，正常模式，图形界面
            6: 重启

            默认级别：3，5
            切换级别：init #
            查看级别：runlevel who -r
        
        配置文件
            /etc/inittab
            每一行定义一种action以及与之对应的process
                id:runlevel:action:process
                action
                    wait  切换到此级别时运行
                    respwan  此procss终止，就重新启动之
                    initdefault  设定默认运行级别，process省略
                    sysinit  完成系统系统初始化方式，此处一般为 /etc/rc.d/rc.sysinit
                    ……

                id:3:initdefault:
                si::sysinit:/etc/rc.d/rc.sysinit
                l0:0:wait:/etc/rc.d/rc 0
                l1:1:wait:/etc/rc.d/rc 1
                ……
                l6:6:wait:/etc/rc.d/rc 6

                说明：rc 0 意味着读取 /etc/rc.d/rc0.d/下的脚本，分别进行进行执行，该目录下的脚本都是 /etc/rc.d/init.d/ 目录下脚本的链接文件，分两类
                    K##*
                    S##*
                    其中##是两位数字，表示运行次序，越小就越先运行
                    以 K 打头的执行的是 stop 操作
                    以 S 打头的执行的是 start 操作
                    执行方式
                        for srv in /etc/rc.d/rc0.d/K*; do
                            $srv stop
                        done

                         for srv in /etc/rc.d/rc0.d/S*; do
                            $srv start
                        done

            chkconfig命令
                查看服务在所有级别的启动或关闭设定情形
                    chkconfig --list name
                添加
                    sysv的脚本放置于 /etc/rc.d/init.d (/etc/init.d)
                    chkconfig --add name

                    #!/bin/sh
                    #
                    # crond          Start/Stop the cron clock daemon.
                    #
                    # chkconfig: 2345 90 60

                删除
                    chkconfig --del name
                
                修改其指定级别的链接类型
                    chkconfig [--level LLLL] name <on|off|reset>
                        --level LLLL 设置级别，省略时为 2345
                
            注意：正常级别最后启动一个服务 S99local 没有链接到 /etc/rc.d/init.d/ 下的一个服务脚本，而是指向了 /etc/rc.d/rc.local 脚本，因此，不便或不需写为服务脚本放置 /etc/rc.d/init.d/ 目录，且又想开机时自动运行的脚本，可直接放置于 /etc/rc.d/rc.local 文件中

            tty1:2345:respawn:/sbin/mingetty tty1
            ....
            tty6:2345:respawn:/sbin/mingetty tty6

            mingetty会调用 login 程序

        /etc/rc.d/init.d/rc.sysinit
            1. 设置主机名
            2. 设置欢迎信息
            3. 激活 udev 和 selinux
            4. 挂载 /etc/fstab 文件中定义的文件系统
            5. 检测根文件系统，并以读写方式重新挂载
            6. 设置系统时钟
            7. 激活 swap 设备
            8. 根据 /etc/sysctl.conf 文件设置内核参数
            9. 激活 lvm 及 software raid 设备
            10. 加载额外设备驱动程序
            11. 清理操作

    总结：
        /sbin/init -> /etc/inittab -> 设置默认运行级别 -> 运行系统初始化脚本，完成系统初始化 -> 关闭对应级别下需要关闭的服务，启动需要启动的服务 -> 设置登录终端

    CentOS 6 
        init 程序为upstart，其配置文件
            /ect/inittab/    /etc/init/*.conf
        注意：/etc/init/*.conf 遵循 upstart 配置文件语法

    GRUB
        grub legacy
            stage 1: mbr
            stage 1.5 mbr之后的扇区，让stage 1 中的bootloader能识別 stage 2 所在分区上的文件系统
            stage 2: 磁盘分区上(/boot/grub)，本身及内核通常放置于一个基本分区
            
            配置文件： 
                /boot/grub/grub.conf
                /etc/grub.conf -> /boot/grub/grub.conf

            功用：
                1. 提供菜单，并提供交互式接口
                    e  编辑模式，用于编辑菜单
                    c  命令模式，交互式接口

                2. 加载用户选择的内核或操作系统
                    允许传递参数给内核
                    可隐藏此菜单
                
                3. 为菜单提供保护机制
                    为编辑菜单进行认证
                    为启用内核或操作系统进行认证

            如何识别设备
                (hd#,#)
                    hd#  磁盘编号，用数字表示，从 0 开始编号
                    #  分区编号，用数字表示，从 0 开始编号
                例如(hd0,0)

            grub命令行接口
                help  获取帮助列表
                    help KEYWORD   详细帮助信息
                
                find  查找文件
                    find (hd#,#)/PATH/TO/SOMEFILE

                root (hd#,#)  设定根
                    root (hd0,0)

                kernel /PATH/TO/KERNEL_FILE  设定本次启动用到的内核文件，还可以添加命令行参数
                    kernel 命令参数
                    例如 init=/path/to/init   selinux=0

                initrd /PATH/TO/INITRAMFS_FILE  设定为选定的内核提供额外的 ramdisk
                
                boot  引导启动选定的内核

            手动在 grub 命令行接口启动系统
                grub> root (hd0,0)
                grub> kernel /vmlinuz-VERSION-release ro root=/dev/DEVICE
                grub> initrd /initramfs-VERSION-release.img
                grub> boot

            配置文件  /boot/grub/grub.conf
                配置项
                    default=#  设定默认启动的菜单项，菜单项(title)编号从0开始
                    timeout=#  指定菜单项等待“选择选项”时长
                    splashimage=(hd#,#)/path/to/XPM_PIC_FILE  指明菜单背景图片路径
                    hiddenmenu  隐藏菜单
                    password [--md5]  STRING  菜单编辑认证
                    title TITLE  定义菜单项“标题”，可出现多次
                        root (hd#,#)   grub获取 stage 2 及 kernel 文件所在设备分区，为 grub 的“根”
                        kernel /PATH/TOVMLINUZ_FILE [parameters]  启动的内核
                        initrd /PATH/TOINITRAMFS_FILE   内核配置的ramfs文件
                        password [--md5]  STRING  启动选定的内核或操作系统进进行认证

                    密码加密串生成工具
                        grub-md5-crypt
            
            进入单用户模式
                1. 编辑 grub 菜单(e 命令，选定要编辑的 title)
                2. 在选定的 kernel 后面，附加 1 S s 或 single 都可以
                3. 在 kernel 所在行，键入“b”命令

            安装grub
                1. grub-install
                    grub-install --root-directory=ROOT /dev/DISK
                2. grub
                    grub> root (hd#,#)
                    grub> setup (hd#)

        练习
            1. 新加硬盘，提供直接单独bash系统
            2. 破坏本机grub stage 1，而后在救援模式下修复
            3. 设置grub保护功能

Linux Kernel
    单内核体系设计，但充分借鉴了微内核设计优点，为内核引入模块化机制

    内核组成部分
        kernel，内核核心，一般为bzImage，通常在 /boot 目录下，名称为 vmlinuz
        kernel object，内核对象，一般放置于 /lib/modules/VERSION-release/ 目录下
        辅助文件，ramdisk
            initrd
            initramfs

    运行中内核的版本
        uname 命令
            uname - print system information
            选项
                -n  显示节点名称
                -r  显示VERSION-release
    
    模块
        lsmod命令
            显示由核心已经装载的内核模块
            显示的内容来自 /proc/modules

        modinfo
            显示模块详细描述信息
            modinfo [ -0 ]  [ -F field ]  [ -k kernel ]  [ modulename|filename... ]
            -n 文件路径
            -p 显示模块参数
            -a author
            -d description
            -l license

        dedmod
            内核模块依赖文件关系及系统信息生成工具

    装载或卸载内核模块
        insmod  
            insmod [ filename ]  [ module options... ]
        rmmod
            rmmod [ -f ]  [ -w ]  [ -s ]  [ -v ]  [ modulename ]
        此两个命令在装载或卸载时，不会装载或卸载依赖模块

    /proc 目录
        内核把自己内部状态信息及统计信息，以及可配置参数通过一个伪文件系统 procfs 加以输出
        参数：
            只读，输出信息
            可写，可接受用户指定“新值”来实现对内核某功能或特性的配置
                /proc/sys
                1. sysctl命令用来查看或设定此目录中的参数
                    sysctl -w path.to.parameter=VALUE
                    如： sysctl -w kernel.hostname=mail.lsu.edu.cn

                2. 通过 echo 命令重定向的方式也可以修改大多数参数的值
                    echo "VALUE" > /path/to/parameter
                    如： echo "mail.lsu.edu.cn" > /proc/sys/kernel/hostname

        sysctl命令
            配置文件  /etc/sysctl.conf
            设置参数
                sysctl -w parameter=VALUE
            通过配置文件设置参数
                sysctl -p [/path/to/conf_file]

        内核中路由转发
            /proc/sys/net/ipv4/ip_forward

        常用的几个参数
            net.ipv4.ip_forward
            v.drop_cache
            kernel.hostname

    /sys 目录
        sysfs，输出内核识别出的硬件属性的相关信息，也有内核对硬件特性的设定信息，有些参数可以修改的，用于调整硬件工作特性，udev通过此路径下的输出信息为各设备创建所需的设备文件，udev是运行在用户空间的程序，专用工具有 udevadmin  hotplug
        udev 为设备创建设备文件时，会读取事先定义好的规则文件，一般在 /etc/udev/rules.d/  及 /usr/lib/udev/rules.d/ 目录下

    ramdisk文件制件
        1. mkinitrd 命令
            为当前正在使用的内核重新制件 ramdisk 文件
            mkinitrd /boot/initramfs-$(uname- r).img $(uname -r)
        2. dracut 命令
            为当前正在使用的内核重新制件 ramdisk 文件
            dracut /boot/initramfs-$(uname- r).img $(uname -r)

编译内核
    前提
        1. 准备好开发环境
        2. 获取目标主机硬件设备的相关信息
        3. 获取到目标主机系统功能相关信息，如启用的文件系统
        4. 获取内核源码包

    准备好开发环境
        包组  Server Platform Development  和 Development Tools  
    
    目标主机硬件信息
        cpu
            cat /proc/cpuinfo
            x86_info -a (可能需要安装该命令)
            lscpu

        PCI设备
            lspci [-v | -vv]
            lsusb [-v | -vv]
            lsblk

    了解全部硬件设备信息
        hal-device

    简单依据模板文件编译内核过程
        tar xf linxu-2.6.32-642.11.1.el6.x86_64 -C /sur/src
        cd /usr/src
        ln -sv linxu-2.6.32-642.11.1.el6.x86_64 linux
        cp /boot/config-$(uname -r) ./.config
        make menuconfig
        screen
        make -j #
        make modules_install
        make install
        重新启动系统并测试使用新内核

Linux内核编译
    编译内核步骤
        1. 配置内核选项

            支持更新模式进行配置
            (1) makeconfig  基于命令行以遍历方式支配置内核中可配置的每个选项
            (2) make menuconfig  基于 curses 的文本窗口
            (3) make gconfig  基于GTK开发环境的窗口界面
            (4) make xconfig  基于Qt开发环境的窗口界面
            
            支持“全新配置”模式进行配置
            (1) make defconifg  基于内核为目标平台提供的“默认”配置进行配置
            (2) make allnoconfig  所有选项均回答“no”

        2. 编译
            make -j #

            如何编译内核中一部分功能
                注意：需要位于源码目录树中的基目录

                (1) 只编译某子目录中的相关代码
                    # cd /usr/src/linux
                    # make dir/

                (2) 只编译一个特定的模块
                    # cd /usr/src/linux
                    # make dir/file.ko
                    例如，只为 intel 的 e1000 网卡编译驱动
                        # make drives/net/ethernet/intel/e1000/e1000.ko

    如何交叉编译内核
        编译的目标平台与当前平台不相同
            # make ARCH=arch_name
        要获取特定目标平台的使用帮助
            # make ARCH=arm help

    如何在已经执行编译的内核源码树中重新编译
        事先清理
            # make clean   
                清理大多数编译生成的文件，保留config配置文件 
            # make mrproper
                清理所有编译生成的文件、config配置文件及某些备份文件
            # make distclean
                mrproper，patchs以及编辑器备份文件，即相当于删除修改过的源码目录树，再重新解压

    screen命令
        打开新的screen
            # screen
        退出并关闭screen
            # exit
        剥离当前screen
            ctrl+a, d
        显示所有已经打开的screen
            # screen -ls
        恢复某screen
            # screen -r SESSION

CentOS系统安装
    bootloader -> kernel(initramfs) -> rootfs -> init
    anaconda   安装程序
        tui  基于 curses 的文本窗口
        gui  图形窗口

    CentOS的安装程序启动过程
        MBR  boot.cat
        stage 2  isolinux/islinux.bin
            配置文件  isolinux/isolinux.cfg
        加载内核  ioslinux/vmlinuz
        向内核传递参数  append initrd=initrd.img ……
        装载根文件系统，并启动anaconda

        默认启动GUI窗口
        若要显式指定使用TUI窗口，可以向内核传递 text 参数
            boot:  linux text

        注意：上述内容应位于引导设备上，而后续的 anaconda 及其安装用到的程序包有几种方式可用：
            本地光盘
            本地硬盘
            FTP  HTTP NFS 等方式上的 yum repository
            如果相手动指定安装源
                boot: linux method

    anaconda 应用工作过程
        1. 安装前配置阶段
            安装过程中使用的语言
            键盘
            时区
            分区设定，MBR安装位置
            选定程序包
            ……
        2. 安装阶段
            对目标磁盘进行分区、格式化
            将选定的程序安装到目标位置
            安装bootloader
        3. 首次启动
            iptables
            selinux
            core dump  核心转储

    anaconda的配置方式
        1. 交互式配置
        2. 通过读取事先给定的配置文件，自动完成配置
            kickstart文件

    安装引导选项
        boot:
            text  文本安装方式
            method  手动指定使用产安装方式
        与网络相关的引导选项
            ip=ADDR
            netmask=MASK
            gateway=GW
            dns=DNS_SERVER_IP
            ifname=NAME:MAC_ADDR
        与运程访问功能相关的引导选项
            vnc
            vncpassword=‘PASSWORD'
        指明kickstart文件的位置
            ks=
                DVD drive  ks=cdrom:/PATH/TO/KICKSTAT.FILE
                HD drive  ks=hd:/device/dir/KICKSTAT.FILE
                HTTP  ks=http://host:port/PATH/TO/KICKSTAT.FILE
                FTP  ks=ftp://host:port/PATH/TO/KICKSTAT.FILE
                HTTPs  ks=https://host:port/PATH/TO/KICKSTAT.FILE
        
        启动紧急救援模式
            rescue
        
        官方文档  《Installation Guide》

    kickstart文件的格式
        命令段：指明各种安装前配置，如键盘类型等
        程序包段：指明要安装的程序包组或程序包，以及不安装的程序包
            %packages
                @group_name
                package
                -package
            %end
        脚本段：
            %pre   安装前脚本
                运行环境为安装介质上微型Linux
            %post  安装后脚本
                运行环境为安装完成之后的系统

        命令段中的命令
            必备命令
                authconfig  认证方式
                    authconfig --useshadown --pawwalgo=512
                bootloader  bootloader的安装位置及相关配置
                keyboard  设定键盘类型
                lang  语言类型
                part  创建分区
                rootpw  指明root用户密码
                timezone  指明时区
            可选命令
                install OR upgrade
                text  文本安装界面
                network
                firewall
                selinux
                halt
                poweroff
                reboot
                repo
                user  安装后，创建新用户
                url  指明安装源

        创建kickstart文件的方式
            直接手动编辑
                依据某模板修改
            可使用创建工具  system-config-kickstart(CentOS 6)
                依据某模板修改
        
        检查ks文件中的语法错误
            ksvalidator /PATH/TO/KICKSTAT_FILE

    基于isolinux目录创建引导盘：
        # mkisofs -R -J -T -v --no-emul-boot --boot-load-size 4 --boot-info-table -V "CentOS 6.5 x86_64 boot" -b isolinux/isolinux.bin -c isolinux/boot.cat -o /root/boot.iso myiso/

SELinux
    SELinux  secured Enhanced Linux，工作于Linux内核
    DAC  自主访问控制
    MAC  强制访问控制

    SELinux工作级别
        strick   每个进程都受到 selinux 的控制
        targeted  仅有限个进程受到 selinux 的控制
            只监控容易被入侵的进程

    SELinux为每个文件提供了安全标签，也为进程提供了安全标签
        user:role:type
        user  SELinux的user
        role  角色
        type  类型

    SELinux规则库
        规则：哪种域能访问哪种或哪些种类型内文件

    配置SELinunx
        SELinux是否启用
        给文件重新打标
        设定某些布尔型特性

    SELinux的状态
        enforcing  强制，每个受限的进程都必然受限
        permissive  启用，每个受限的进程违规操作不会被禁止，但会被记录于审计日志中
        disabled  关闭

    相关命令
        getenforce  获取SELinux当前状态
        setenforce 0 | 1
            0  设置 permissive
            1  设置 enforced
        此设置仅当前系统有效，重启系统之后无效

    配置文件
        /etc/sysconfig/selinux  /etc/selinux/config

    给文件重新打标
        chcon
        chcon [OPTION]... [-u USER] [-r ROLE] [-l RANGE] [-t TYPE] FILE...
            -R 递归打标
    还原默认标签
        restorcon [-R] filename
    
    布尔型规则
        getsebool命令
            getsebool [-a] [boolean]
        setsebool
            setsebool [ -PV] boolean value | bool1=val1 bool2=val2 ...

bash脚本编程
    函数：结构化编程及代码重用，function关键字
    while循环
        while CONDITION; do
            循环体
        done

    CONDITION  循环控制条件，进行循环体运行之前，先进行条件判断，执行每次循环之后，再做判断，如果条件为“真”，则执行循环体中的相关语句，直到条件为“false”，循环结束。因此，CONDITION一般应有循环控制变更，变量的值会在循环过程中被修改。

    练习
        1. 添加10个用户，用while循环
        2. 打印九九乘法口诀表，分别用for循环和while循环
        3. 利用RANDON生成10个随机数，输出到屏幕，并输出其中的最大值和最小值



            



    
                

    
        




    




            
















    
                


            




















        











        





    


 








        









